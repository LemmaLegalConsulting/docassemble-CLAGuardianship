---
include:
  #- shared.yml
  - docassemble.AssemblyLine:assembly_line.yml
---
modules:
  - .care_and_custody
---
metadata:
  title: >-
    Affidavit Disclosing Care or Custody Proceeding
  short title: >-
    Affidavit of Care and Custody
  description: |-
    The *Affidavit Disclosing Care or Custody Proceeding* is a form you have to file in court cases that involve ${ children[0].familiar() if len(children.complete_elements()) > 0 else f"the minor" }.

    This form tells the court if there are already any court orders about ${ children[0].familiar() if len(children.complete_elements()) > 0 else f"the minor" }. It also tells the court if any judge is making decisions about ${ children[0].familiar() if len(children.complete_elements()) > 0 else f"the minor" } now.
  authors:
    - Court Forms Online
  allowed_courts:
    - "Probate and Family Court"
  typical_role: "plaintiff"
  al_weaver_version: "1.10.3"
---
code: |
  AL_DEFAULT_COUNTRY = "US"
---
code: |
  AL_DEFAULT_STATE = "MA"
---
code: |
  github_repo_name = 'docassemble-CLAGuardianship'
---
code: |
  interview_short_title = "Tell the court about any cases or proceedings about the care and custody of a minor"
---
code: |
  al_form_type = "other"
---
code: |
  children_of_both = children
---
objects:
  - other_care_custody_proceedings: OtherProceedingList
  - signing_attorney: ALIndividual
  - attorneys: ALPeopleList.using(complete_attribute="complete")
  - others_in_proceedings: ALPeopleList.using(auto_gather=False)
  - attorneys_for_children: ALPeopleList.using(auto_gather=False)
  - attorneys_for_children[i].represented_children: ALPeopleList
  - attorneys_for_parents: ALPeopleList.using(auto_gather=False)
  - children[i].gals: ALPeopleList.using(ask_number=True)
---
id: interview_order_affidavit_disclosing_care_or_custody
code: |

  affidavit_disclosing_care_or_custody_intro
  attorneys.gather()
  children.there_are_any = True
  children.gather()
  assigned_letters # Give each "children_of_both" a letter from A-Z
  # explain_addresses_of_children  # Take out for standalone

  confidential_address

  has_participated_custody_case
  other_care_custody_proceedings.gather()
  for child in children:
    child.gals.gather()
  removed_other_people_duplicates

  impound_affidavit
  day

  if form_filled_by_attorney:
    if (al_person_answering == "minor") or (al_person_answering == "interested_party" and needs_attorney_signature):
      set_signing_attorney

  need_past_address_appendix
  need_other_parties_appendix

  str(users[0])
  users[0].address.on_one_line(include_unit=True)
  fill_in_court_name

  for child in children_of_both:
    child.address.address
    child.lives_with
    child.previous_addresses.gather()

  others_in_proceedings.gather()
  set_party_name

  interview_order_affidavit_disclosing_care_or_custody = True  
---
code: |
  DCF = ALIndividual("DCF")
  DCF.address = DAEmpty()
  DCF.address_for_form = DAEmpty()
  DCF.name.first = "Department of Children and Families"
---
#################### Object/Code Blocks Start #####################
---
code: |
  if len(attorneys):
    signing_attorney.name.first = attorneys[0].name.first
    signing_attorney.name.last = attorneys[0].name.last
    signing_attorney.name.middle = attorneys[0].name.middle
    signing_attorney.name.suffix = attorneys[0].name.suffix
    signing_attorney.address.address = attorneys[0].address.address
    signing_attorney.address.unit = attorneys[0].address.unit
    signing_attorney.address.city = attorneys[0].address.city
    signing_attorney.address.state = attorneys[0].address.state
    signing_attorney.address.zip = attorneys[0].address.zip

  set_signing_attorney = True
---
code: |
  if form_filled_by_attorney:
    party_name_attorney = str(users[0])
    has_attorney = True
  else:
    party_name_no_attorney = str(users[0])
    no_attorney = True

  set_party_name = True
---
code: |
  if (not confidential_address) and (not ask_impound_affidavit):
    no_confidential_addresses = True

  set_no_address_change = True
---
#################### Override Blocks Start #####################
---
#################### Question Blocks Start #####################
---
sets:
  - children[i].address.address
id: where children live
question: |
  Where does ${children[i].familiar()} live right now?
fields:
  - An address already mentioned: children[i].address
    datatype: object
    choices:
      - users[0].address
    object labeler: |
      lambda y: y.on_one_line(include_unit=True)
    disable others: True
  - code: |
      children[i].address.address_fields()
  - When did ${children_of_both.familiar()} start living at this address?: children[0].address.start_date
    validate: include_a_year
  - Who does ${children[i]} live with at this address?: children[i].lived_with
    datatype: area
    rows: 2
  - What is the relationship of the person or people to ${children[i]}?: children[i].relationship
    datatype: area
    rows: 2
---
id: lives with
question: |
  Who does ${children[i]} live with at ${ children[i].address.on_one_line(include_unit=True) }?
fields:
  - Who does ${children[i]} live with at this address?: children[i].lived_with
    datatype: area
    rows: 2
  - What is the relationship of the person or people to ${children[i]}?: children[i].relationship
    datatype: area
    rows: 2
  - When did ${children_of_both.familiar()} start living at this address?: children[0].address.start_date
    validate: include_a_year
---
id: addresses of children explanation
question: |
  Addresses of children
subquestion: |
  In the next few questions, we'll ask you about the addresses of each child.

  We need to include this information together with the other information
  about past care or custody cases.
continue button field: explain_addresses_of_children
---
id: child has past address
question: |
  Has ${children[i]} lived anywhere else in the last 2 years?
yesno: children[i].previous_addresses.there_are_any
---
id: child past addresses
question: |
  ${ordinal(j).capitalize()} Previous Addresses for ${children[i]}
subquestion: |
  List each address other than ${children[i].address.on_one_line(include_unit=True)}
  where ${children[i]} has lived in the last 2 years below.

#To add more than one, click ${word("Add another")}.
#list collect:
#  enable: True
#  label: |
#    ${ordinal(j).capitalize()} Address
fields:
  - An address previously mentioned: children[i].previous_addresses[j]
    datatype: object
    choices: collected_addresses
    disable others: True
    object labeler: |
      lambda y: y.on_one_line(include_unit=True)
    exclude: children[i].address
  - Start date: children[i].previous_addresses[j].start_date
    maxlength: 12
  - End date: children[i].previous_addresses[j].end_date
    maxlength: 12
  - Address: children[i].previous_addresses[j].address
    address autocomplete: True
  - Unit: children[i].previous_addresses[j].unit
    required: False
  - City: children[i].previous_addresses[j].city
  - State: children[i].previous_addresses[j].state
    code: |
      states_list()
    default: "MA"
  - Zip: children[i].previous_addresses[j].zip
    required: False
  - Who did ${children[i]} live with at this address?: children[i].previous_addresses[j].lived_with
    datatype: area
    rows: 2
  - What was the relationship of the person or people to ${children[i]}?: children[i].previous_addresses[j].relationship
    datatype: area
    rows: 2
---
id: start date of previous address
question: |
  When did ${children[i]} start living at ${ children[i].previous_addresses[j] }?
fields:
  - Start date: children[i].previous_addresses[j].start_date
    maxlength: 12
  - End date: children[i].previous_addresses[j].end_date
    maxlength: 12
  - Who did ${children[i]} live with at this address?: children[i].previous_addresses[j].lived_with
---
id: child has another past address
question: |
  Has ${children[i]} lived anywhere else in the last 2 years?
subquestion: |
  So far you have told us about ${comma_and_list(children[i].previous_addresses.elements)}
yesno: children[i].previous_addresses.there_is_another
---
reconsider: True
code: |
  # We put addresses in a dictionary as a simple hashtable
  collected_addresses_temp = {}

  # We use dict.setdefault method here so that we never add
  # the same address twice. Hash will be address.on_one_line() output
  collected_addresses_temp.setdefault(users[0].address.on_one_line(include_unit=True), users[0].address)
  # collected_addresses_temp.setdefault(other_parties[0].address.on_one_line(include_unit=True), other_parties[0].address)
  for child in children_of_both:
    if defined('child.address.address') and len(child.address.address):
      collected_addresses_temp.setdefault(child.address.on_one_line(include_unit=True),child.address)
    # we collect one by one, so we don't want to trigger child 7 to figure out what addresses
    # to include in the drop-down for child1
    if defined('child.previous_addresses.there_are_any') and child.previous_addresses.there_are_any:
      for add in child.previous_addresses.complete_elements():
        if defined('add.address.address') and len(add.address.address):
          collected_addresses_temp.setdefault(add.on_one_line(include_unit=True), add)
  collected_addresses = list(collected_addresses_temp.values())
---
code: |
  have_pending_cases = len(other_care_custody_proceedings.filter(is_open=True)) > 0
---
code: |
  case_name = 'In the interests of: ' + str(children[0].name)
---
sets:
  - other_parties[i].name.first
  - other_parties[i].name.last
id: name of other party
question: |
  What is the name of the person on the other side of this case?
subquestion: |
  For example: the person you want to be protected from or the person
  you are divorcing.

  If you need to list more than one person on this form, you can click
  "Add another".
fields:
  - code: other_parties[i].name_fields()
---
code: |
  if 'District' in trial_court.name:
    trial_court.division_district_court = trial_court.division
  elif 'Superior' in trial_court.name:
    trial_court.division_superior_court = trial_court.division
  elif 'Juvenile' in trial_court.name:
    trial_court.division_juvenile_court = trial_court.division
  elif 'Probate' in trial_court.name:
    trial_court.division_family_court = trial_court.division
  elif 'Municipal' in trial_court.name: 
    trial_court.division_bmc = trial_court.division
  fill_in_court_name = True
---
code: |
  user_role = 'plaintiff'
---
question: |
  Confidential Address - Affidavit Disclosing Care or Custody Proceeding
subquestion: |
  The affidavit disclosing care or custody proceedings form has two pages. 
  The second page lists addresses and phone
  numbers and can be kept confidential (private) if you need it to be.

  ${ collapse_template(explain_confidential_addresses) }

  Do you need to keep phone numbers and addresses information private for any of the following reasons?
fields:
  - Check any that you have good reason to believe: confidential_address_reasons
    datatype: checkboxes
    choices:
      - someone has a 209A (abuse prevention) order
      - someone lives in a domestic violence shelter
      - someone (other than ${ children[0].familiar() if len(children.complete_elements()) > 0 else f"the minor" }) in danger of abuse
      - ${ children[0].familiar() if len(children.complete_elements()) > 0 else f"the minor" } is in danger of abuse
      - another (legal) reason not listed above
---
template: explain_confidential_addresses
subject: |
  When can I keep an address private?
content: |
  You can keep an address private if you believe that:

  * You live in a shelter for battered persons
  * You or your children are in danger of physical or emotional abuse
  * You are filing this form together with a 209A abuse prevention order

  If you believe that you have another legal reason to keep your
  address information private, select that option on the previous screen.
---
code: |
  # This checks box 3 on the form
  confidential_address = confidential_address_reasons.any_true()
---
# This should show the address of the plaintiff and each kid, but
# Only if they are unique
id: child address
question: |
  Where does ${children[i]} live?
fields:
  - An address already mentioned: children[i].address
    datatype: object
    choices:
      - collected_addresses
      - users[0].address
    object labeler: |
      lambda y: y.on_one_line()
    disable others: True
  - Street address: children[i].address.address
    address autocomplete: True
  - Apartment: children[i].address.unit
    required: False
  - City: children[i].address.city
  - State: children[i].address.state
    code: |
      states_list()
    default: MA
    show if:
      variable: children[i].address.country
      is: USA
  - Province/State: children[i].address.state
    hide if:
      variable: children[i].address.country
      is: USA
  - Country: children[i].address.country
    default: USA
  - ${ children[i].familiar() } has lived here since: children[i].address.start_date
    validate: include_a_year
  - Who does ${children[i]} live with?: children[i].lives_with
    datatype: area
    rows: 2
    default: |
      ${ showifdef(children[-1].attr_name("lives_with")) }
  - What is the relationship of the person or people to ${children[i]}?: children[i].relationship
    datatype: area
    rows: 2
    default: |
      ${ showifdef(children[-1].attr_name("relationship")) }
  

---
id: who lives with
question: |
  Who does ${children[i]} live with?
fields:
  - Who does ${children[i]} live with?: children[i].lives_with
    datatype: area
    rows: 2
    default: |
      ${ showifdef(children[-1].attr_name("lives_with")) }
  - What is the relationship of the person or people to ${children[i]}?: children[i].relationship
    datatype: area
    rows: 2
    default: |
      ${ showifdef(children[-1].attr_name("relationship")) }
  - ${ children[i].familiar() } has lived here since: children[i].address.start_date
    validate: include_a_year
---
code: |
  # Ask the user if they want the affidavit impounded ONLY if they have an
  # adoption case listed on the form. Otherwise not relevant
  impound_affidavit = False if not other_care_custody_proceedings.includes_adoption() else ask_impound_affidavit
---
id: adoption privacy
question: |
  Privacy of adoption records
subquestion: |
  You said that one of the cases mentioning
  ${comma_and_list(children_of_both,and_string=word("or"))} is an adoption.

  You have the right to tell the court to keep this form private so the
  adoption is not a public record.

  Would you like to keep this form private?
yesno: ask_impound_affidavit
---
# TODO: I think this is unused
id: any gal attorney investigator
generic object: OtherProceeding
question: |
  Attorneys, Guardians ad Litem, and Investigators
subquestion: |
  The court asks you to name the people involved in any case that is
  still "pending", or not yet decided by a judge or agreement.

  Were there any attorneys, guardians ad litem, probation officers, 
  court evaluators, or investigators involved in this case?
yesno: x.attorneys.there_are_any
# ---
# generic object: OtherProceeding
# question: |
#   Attorneys, Guardians ad Litem, and Investigators
# subquestion: |
#   Please list the names of each attorney, guardian ad litem, and investigator
#   who is involved in the "${x}" case.
# list collect: True
# fields:
# # An attorney already mentioned
#   - Name: x.attorneys[i].name.first
#   - Role in this case: x.attorneys[i].role
#     choices:
#       - Attorney: attorney
#       - Guardian ad Litem: GAL
#       - Investigator: investigator
#   - Did this person represent your child, or an adult?: x.attorneys[i].represented_child_or_adult

#   - Who does this person represent?: x.attorneys[i].represented_parties
#     datatype: checkboxes
#     code: |
#       children + users + other_parties
#     minlength: 1
---
code: |
  day = ordinal_number(int(signature_date.format('dd')), use_word=False) # https://docassemble.org/docs/functions.html#ordinal_number
  month = signature_date.format('MMMM')
  year = signature_date.format('yy')
---
# id: docket number
# comment: |
#   This is only useful in the standalone one
# question: |
#   Docket Number
# subquestion: |
#   If you know the docket number for this case, enter it below.
# fields:
#   - I do not know the docket number: dont_know_docket_number
#     datatype: yesno
#   - Docket number: docket_numbers[0]
#     hide if: dont_know_docket_number
# validation code: |
#   # docket_numbers.there_are_any = not dont_know_docket_number
#   if dont_know_docket_number:
#     docket_numbers[0] = ' '
#   docket_numbers.there_is_another = False
---
# code: |
#   docket_numbers.there_are_any = False
---
id: attorney signature
question: |
  Affidavit Disclosing Care or Custody - Attorney Signature
fields:
  - label: |
      Are you an attorney who will sign the Affidavit Disclosing Care and Custody on behalf of someone who is a juvenile (under 18) or incompetent?
    field: needs_attorney_signature
    label above field: True
    datatype: yesnoradio
---
id: attorney signing address
question: |
  What is the address of the attorney signing this form?
fields:
  - Street: signing_attorney.address.address
    address autocomplete: True
  - Unit: signing_attorney.address.unit
    required: False
  - City: signing_attorney.address.city
  - State: signing_attorney.address.state
    code: |
      states_list()
  - Zip: signing_attorney.address.zip
    required: False
---
#question: |
#  Date
#subquestion: |
#  What's today's date
#fields:
#  - 'Day': day
#  - 'Month': month
#  - 'Year': year
---
id: prior custody cases screener
question: |
  Other care or custody cases
subquestion: |
  Do you know about any other court cases where the judge made or is making
  decisions about the care or custody of ${children_of_both}?
    
  This may include any case that involved:

  * custody  
  * a 209A restraining order
  * divorce or annulment
  * child requiring assistance (CRA)
  * child support
  * paternity
  * visitation
  * adoption
  * juvenile delinquency
  * DCF case involving care and protection

  Answer yes even if the judge did not make a decision about custody.
  We'll ask you more about any cases in the next few questions.
fields:
  - no label: custody_case_participation
    datatype: radio
    choices:
      - I am now or have been **part of** another case involving ${comma_and_list(children_of_both, and_string=word("or"))}: participated
      - I was not part of any other case, but I **know** about another case involving ${comma_and_list(children_of_both, and_string=word("or"))}: know of
      - I don't know about any other cases involving ${comma_and_list(children_of_both, and_string=word("or"))}: no cases
---
code: |
  has_participated_custody_case = custody_case_participation == "participated"
  has_not_participated_custody_case = not has_participated_custody_case
  know_of_other_custody_case = custody_case_participation in ["know of", "participated"]
  do_not_know_of_other_custody_case = not know_of_other_custody_case
---
code: |
  other_care_custody_proceedings.there_are_any = has_participated_custody_case or know_of_other_custody_case
---
id: about the other care or custody proceeding
need: DCF
question: |
  Tell us about the ${ordinal(i)} case involving ${comma_and_list(children_of_both, and_string=word("or"))}
subquestion: |
  Include the best information you know. If you’re not sure, it is okay to leave information blank or to write down what you remember.

  Only include information about cases that involve ${ children[0].familiar() if len(children.complete_elements()) > 0 else f"the minor" }.

  You will have a chance to add more cases later.
fields:
  - What is the best description of this case? You do not need the exact name.: other_care_custody_proceedings[i].case_status
    choices:
      - A 209A restraining order: a 209A restraining order
      - Adoption: adoption
      - Annulment: annulment
      - Care and protection: care and protection
      - Child Requiring Assistance (CRA): CRA
      - Custody/Support/Parenting time: custody/support/parenting time
      - Custody/Support/Visitation: custody/support/visitation
      - Complaint to establish paternity: paternity
      - Divorce: divorce
      - Guardianship: guardianship
      - Separate support or other legal separation: separate support or legal separation
      - Other: other
  - This case happened outside of Massachusetts: other_care_custody_proceedings[i].non_ma_court
    datatype: yesno
  - Name of court this case was filed in: other_care_custody_proceedings[i].court_name
    show if: other_care_custody_proceedings[i].non_ma_court
  - Name of court this case was filed in: other_care_custody_proceedings[i].court_name
    hide if: other_care_custody_proceedings[i].non_ma_court
    datatype: combobox
    code: |
      sorted((set([str(y) for y in all_courts.filter_courts(["District Court","Boston Municipal Court", "Probate and Family Court", "Superior Court", "Juvenile Court"])])))
  - Docket number: other_care_custody_proceedings[i].docket_number
    required: False
  - Which children were involved in this case?: other_care_custody_proceedings[i].children
    datatype: object_checkboxes
    choices: |
      children_of_both
    none of the above: False
    minlength: 1
    show if:
      code: |
        len(children_of_both) > 1
  - What was your role in this case?: other_care_custody_proceedings[i].user_role
    datatype: radio
    choices:
      - Witness: W
      - Party: P
      - Other: O
      - I was not involved: N
    default: ${'N' if not has_participated_custody_case else ''}
    hide if:
      variable: other_care_custody_proceedings[i].case_status
      is: adoption
  - Who else was part of this case?: other_care_custody_proceedings[i].other_party_types
    datatype: checkboxes
    choices:
      # - ${other_parties.familiar()}: defendant
      - Department of Children and Families: dcf
      - Someone else (like a grandparent): other
  - Is this case still open?: other_care_custody_proceedings[i].is_open
    datatype: yesnoradio
    help: |
      Answer "yes" if the case is still ongoing. Choose no if a judge made a final decision,
      even if you or another person plans to appeal to it.
  - Was custody awarded?: other_care_custody_proceedings[i].custody_awarded
    js hide if: |
      val("other_care_custody_proceedings[i].case_status") == "adoption"
    datatype: yesnoradio
  - Who was given custody?: other_care_custody_proceedings[i].person_given_custody
    js show if: |
      !(val("other_care_custody_proceedings[i].case_status") == "adoption") && val("other_care_custody_proceedings[i].custody_awarded")
  - Date custody was given: other_care_custody_proceedings[i].date_of_custody
    datatype: date
    js show if: |
      !(val("other_care_custody_proceedings[i].case_status") == "adoption")  && val("other_care_custody_proceedings[i].custody_awarded")
validation code: |
  # We don't ask the user to select which minor is in the case if
  # there is only one child. Below code adds the minor to the appropriate
  # list so we can write more general code.
  if len(children_of_both) == 1:
    other_care_custody_proceedings[i].children = children_of_both

---
code: |
  other_care_custody_proceedings[i].other_parties.there_are_any = other_care_custody_proceedings[i].other_party_types["other"]
---
sets:
  - other_care_custody_proceedings[i].other_parties[j].address.address
id: other parties in case
question: |
  Who else was involved in this case?
subquestion: |
  % if len(other_care_custody_proceedings[i].other_parties.complete_elements()):
  You have already told us about ${comma_and_list(other_care_custody_proceedings[i].other_parties.complete_elements())}
  % endif
# list collect:
#   enable: True
#   label: |
#     **${ordinal(j).capitalize()}** additional party
fields:
  - A person already mentioned: other_care_custody_proceedings[i].other_parties[j]
    datatype: object
    choices: others_in_proceedings
    disable others: True
    exclude: # Don't ever offer DCF or OP here
      - DCF
      - other_care_custody_proceedings[i].other_parties.complete_elements()
      # - other_parties[0]
  - Name: other_care_custody_proceedings[i].other_parties[j].name.first
  - code: |
      other_care_custody_proceedings[i].other_parties[j].address_fields(default_state="MA")
  # other_care_custody_proceedings[i].other_parties[j].address.geolocate(other_care_custody_proceedings[i].other_parties[j].address_for_form)
  # if not other_care_custody_proceedings[i].other_parties[j].address.geolocated:
  #   other_care_custody_proceedings[i].other_parties[j].address = DAEmpty()


# validation code: |
---
id: was another person in case
question: |
  Was there anyone else involved in this case?
subquestion: |
  % if len(other_care_custody_proceedings[i].other_parties.complete_elements()):
  You have already told us about ${comma_and_list(other_care_custody_proceedings[i].other_parties.complete_elements())}
  % endif
yesno: other_care_custody_proceedings[i].other_parties.there_is_another
---
# TODO: this way of uniquely gathering the parties is not the best
# approach. May be smarter to make a method on ALPeopleList
# or make a new class that subclasses ALPeopleList with a
# unique_people method.
# Also need to re-think the "child_letters" being an attribute
# of the person, rather than collecting the unique child letters
# at the time we build the list.
reconsider: True
comment: |
  This builds our list of parties involved in other care/custody proceedings
  for box8. It's also reconsidered on each page load so we can pick from people 
  who were on previous cases on new screens.
  formerly box8_people.
code: |
  # It's possible this should be optimized, but I think not unless we had hundreds of cases
  # Start with a set to avoid duplicates
  gathering_temp = set()
  # use .elements to avoid forcing list to be gathered before we work with it here  
  for case in other_care_custody_proceedings.elements:
    if case.other_party_types["dcf"]:
      DCF.merge_letters(case.child_letters())
      gathering_temp.add(DCF)
    # if case.other_party_types["defendant"]:
    #   # other_parties[0].merge_letters(case.child_letters())
    #   gathering_temp.add(other_parties[0])
    if case.other_parties.there_are_any:
      for other_party in case.other_parties.complete_elements():
        other_party.merge_letters(case.child_letters())
        gathering_temp.add(other_party)
  others_in_proceedings.elements = list(gathering_temp) # I think we need to convert back to a list
  others_in_proceedings.gathered=True
  del gathering_temp
---
code: |
  other_care_custody_proceedings[i].other_parties[j].child_letters = other_care_custody_proceedings[i].child_letters()
---
id: lawyers in case
if: len(other_care_custody_proceedings[i].children) <= 1
question: |
  Lawyers in ${ordinal(i)} case
subquestion: |
  The court wants to know about people who worked 
  with you or ${children_of_both} 
  for any open cases.

  Who has a lawyer on this case?
fields:
  - You?: other_care_custody_proceedings[i].atty_for_user
    datatype: yesnoradio
  - Name of your lawyer: other_care_custody_proceedings[i].atty_for_user_name
    show if: other_care_custody_proceedings[i].atty_for_user
  # - ${other_parties.familiar()}?: other_care_custody_proceedings[i].atty_for_defendant
  #   datatype: yesnoradio
  # - Name of ${other_parties.familiar()}'s lawyer: other_care_custody_proceedings[i].atty_for_defendant_name
  #   show if: other_care_custody_proceedings[i].atty_for_defendant
  - ${comma_and_list(other_care_custody_proceedings[i].children,and_string=word("or"))}?: other_care_custody_proceedings[i].atty_for_children
    datatype: yesnoradio
  - Name of ${other_care_custody_proceedings[i].children}'s lawyer: other_care_custody_proceedings[i].atty_for_children_name
    show if: other_care_custody_proceedings[i].atty_for_children
---
id: lawyers in case
if: len(other_care_custody_proceedings[i].children) > 1
question: |
  Information about lawyers
subquestion: |
  The court wants to know about people who worked 
  with you or ${children_of_both} 
  in the ${other_care_custody_proceedings[i]}.

  % if i > 1:
  You don't need to tell us about the same lawyer twice,
  if you mentioned this lawyer for a different case.
  % endif

  Who has or had a lawyer on this case?
fields:
  - You?: other_care_custody_proceedings[i].atty_for_user
    datatype: yesnoradio
  # - Name of your lawyer (if already mentioned): other_care_custody_proceedings[i].atty_for_user_name
  #   datatype: object
  #   choices: attorneys_for_parents
  #   show if: other_care_custody_proceedings[i].atty_for_user
  #   disable others:
  #     - other_care_custody_proceedings[i].atty_for_user_name
  - Name of your lawyer: other_care_custody_proceedings[i].atty_for_user_name
    show if: other_care_custody_proceedings[i].atty_for_user
  # - ${other_parties.familiar()}?: other_care_custody_proceedings[i].atty_for_defendant
  #   datatype: yesnoradio
  # - Name of ${other_parties.familiar()}'s lawyer (if already mentioned): other_care_custody_proceedings[i].atty_for_defendant_name
  #   datatype: object
  #   choices: attorneys_for_parents
  #   show if: other_care_custody_proceedings[i].atty_for_defendant
  #   disable others:
  #     - other_care_custody_proceedings[i].atty_for_defendant_name
  # - Name of ${other_parties.familiar()}'s lawyer: other_care_custody_proceedings[i].atty_for_defendant_name
  #   show if: other_care_custody_proceedings[i].atty_for_defendant
  - ${comma_and_list(other_care_custody_proceedings[i].children,and_string=word("or"))}?: other_care_custody_proceedings[i].atty_for_children
    datatype: yesnoradio
  - note: |
      OK, we will ask for the names of each child's lawyer on the next screen.
    show if: other_care_custody_proceedings[i].atty_for_children
---
code: |
  # this could be .there_are_any in the question above directly, but we use
  # the atty_for_children attribute in our attorneys_for_children list building code
  other_care_custody_proceedings[i].attorneys_for_children.there_are_any = other_care_custody_proceedings[i].atty_for_children
---
id: names of childrens lawyers in case
question: |
  Lawyers for children in your ${other_care_custody_proceedings[i]}?
subquestion: |
  List one lawyer at a time. If you need to add more than one lawyer
  for your children on this case, click ${word("Add another")}.
list collect: True
fields:
  - Name of lawyer: other_care_custody_proceedings[i].attorneys_for_children[j].name.first
  - Which children did this lawyer represent?: other_care_custody_proceedings[i].attorneys_for_children[j].represented_children
    datatype: object_checkboxes
    choices: other_care_custody_proceedings[i].children
    none of the above: False
---
id: had any gals
question: |
  Information about people the judge appointed for ${ children[i] }
subquestion: |
  Did a judge in any U.S. state ever appoint an:
  
  * attorney
  * guardian ad litem, sometimes called a GAL
  * probation officer
  * investigator, or 
  * evaluator

  to represent or work on behalf of ${ children[i].familiar(unique_names=users) }?
fields:
  - no label: children[i].has_gal
    datatype: yesnomaybe
  - How many did they appoint?: children[i].gals.target_number
    datatype: integer
    min: 1
    show if: children[i].has_gal
validation code: |
  if not children[i].has_gal:
    children[i].gals.target_number = 0
---
id: names of gals
question: |
  % if children[i].gals.target_number > 1:
  Who was the ${ordinal(j)} person appointed to help ${ children[i].familiar(unique_names=users) }?
  % else:
  Who was appointed to help ${ children[i].familiar(unique_names=users) }?
  % endif
subquestion: |
  % if i >= 1:
  So far you have told us about the following attorneys, GALs and investigators for ${ children[i].familiar(unique_names=users) }:

  ${comma_and_list(children[i].gals.complete_elements()) }
  % endif
fields:
  - Someone already mentioned: children[i].gals[j]
    datatype: object_radio
    choices: |
      [guardian for child in children for guardian in child.gals.complete_elements()]
    disable others: True
    exclude:
      - children[i].gals.complete_elements()
  - Full name: children[i].gals[j].name.first
  - Role: children[i].gals[j].role
    datatype: radio
    choices:
      - Attorney: atty
      - Guardian ad Litem: GAL
      - Probation Officer: PO
      - Investigator: inv.
      - Evaluator: eval.
---
# I believe this is unused now
id: attorneys for child
question: |
  Attorneys involved in your children's cases
subquestion: |
  It sounds like some of the cases you mentioned are still ongoing.

  You told us about the following pending cases so far:

  ${other_care_custody_proceedings.table}

  In the next question, we will ask you about the names of attorneys, guardians
  ad litem, and investigators who were involved in each case.
continue button field: explain_why_asking_about_attorneys
---
# unused
# TODO:
# We need to add some templates here to let the status
# be translated
table: other_care_custody_proceedings.table
rows: other_care_custody_proceedings.filter(is_open=True)
columns:
  - Case type: |
      row_item.case_status
  - Court: |
      row_item.court_name
  - Docket: |
      showifdef('row_item.docket_number')
  - Children: |
      row_item.children
---
id: another care custody case
question: |
  Are there any other cases?
subquestion: |
  So far you have told the court about
  % if len(other_care_custody_proceedings.elements) > 1:
  ${len(other_care_custody_proceedings.elements)} cases: 
  % else:
  ${len(other_care_custody_proceedings.elements)} case: 
  % endif
  ${comma_and_list(other_care_custody_proceedings.elements)}.
yesno: other_care_custody_proceedings.there_is_another
---
reconsider: True
code: |
  # Build the lists of attorneys for parents
  attorneys_for_parents.clear()
  for case in other_care_custody_proceedings.complete_elements():
    # If they selected an attorney and the attorney is a new one 
    # (e.g., a string rather than an Individual)
    if case.is_open and case.atty_for_user and hasattr(case, 'atty_for_user_name'):
      atty = attorneys_for_parents.appendObject()
      atty.name.first = case.atty_for_user_name
      atty.represented_party = users
    # if case.is_open and case.atty_for_defendant and hasattr(case, 'atty_for_defendant_name'):
    #   atty = attorneys_for_parents.appendObject()
    #   atty.name.first = case.atty_for_defendant_name                
    #   atty.represented_party = other_parties
  attorneys_for_parents.gathered = True
---
reconsider: True
code: |
  # Build the list of attorneys for children
  attorneys_for_children.clear()
  for case in other_care_custody_proceedings.complete_elements():
    if case.is_open and case.atty_for_children:
      if len(case.children) == 1:
        atty = attorneys_for_children.appendObject()
        atty.name.first = case.atty_for_children_name
        atty.represented_children = case.children
      else:
        attorneys_for_children.extend(case.attorneys_for_children)
  attorneys_for_children.gathered=True
---
code: |
  if have_pending_cases:
    gals_investigators = other_care_custody_proceedings.get_gals('gals_investigators')
  else:
    gals_investigators = DAList("gals_investigators", gathered=True, auto_gather=False)
---
code: |
  # Assign each child a letter from A..Z, or even AA..AZ, etc.
  # for someone with more than 26 children
  for index, child in enumerate(children_of_both):
    child.letter = number_to_letter(index+1)
  assigned_letters = True
---
code: |
  need_past_address_appendix_temp = False
  for child in children_of_both:
    child.too_many_previous_addresses = len(child.previous_addresses) > 2
    if len(child.previous_addresses) > 2:
      need_past_address_appendix_temp = True
  need_past_address_appendix = need_past_address_appendix_temp
---
code: |
  other_care_custody_proceedings[i].put_on_appendix = False
---
code: |
  need_other_parties_appendix_temp = False
  for proceeding in other_care_custody_proceedings:
    if len(proceeding.other_parties) > 3:
      need_other_parties_appendix_temp = True
      proceeding.put_on_appendix = True
    else:
      proceeding.put_on_appendix = False
  need_other_parties_appendix = need_other_parties_appendix_temp
---
code: |
  # Remove duplicates from list of box8 people

  # avoid idempotency problems
  for person in others_in_proceedings:
    str(person)
    str(person.child_letters ) # Should be a list of strings

  names = set() # Potential issue: 2 box8 people with the same name that are different and were part of different cases. Not worth solving yet
  for index, person in enumerate(others_in_proceedings):
    if str(person) in names: # checking for unique person based on unique names
      for p_level2 in others_in_proceedings:
        if str(person) == str(p_level2): 
          p_level2.child_letters = filter_letters([person.child_letters, p_level2.child_letters]) # these get filtered later for the form.
      others_in_proceedings.pop(index) # remove the duplicate person
    names.add(str(person)) # This is a set so adding won't cause a duplicate

  removed_other_people_duplicates = True
---
code: |
  signature_fields = [user.attr_name('signature') for user in users]
---
id: electronic signature question
question: |
  Electronic Signature
subquestion: |
  This tool can put "*/s/ ${ users[0] }*" where you would sign your name so you do not have to sign the form by hand. The court will accept this as your signature.

  Otherwise, you will need to print your forms and sign them by hand.
fields:
  - Would you like to add your electronic signature to your form?: esign
    datatype: yesnoradio
---
id: download affidavit_disclosing_care_or_custody
event: affidavit_disclosing_care_or_custody_download
question: |
  All done
subquestion: |
  Your form is ready to download and deliver.

  View, download and send your form below. Click the "Edit answers" button to fix any mistakes.

  ${ action_button_html(url_action('review_affidavit_disclosing_care_or_custody'), label='Edit answers', color='info') }


  ${ al_user_bundle.download_list_html() }


  ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }

progress: 100
---
# Bundles group the ALDocuments into separate downloads, such as for court and for the user
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[
      affidavit_of_care_or_custody_attachment
      ],
      filename="care_or_custody",
      title="Affidavit of Care or Custody",
      enabled=True
      )
---
objects:
  - affidavit_of_care_or_custody_attachment:
      ALDocument.using(filename="care_or_custody",
      title="Affidavit of Care or Custody",
      has_addendum=True,
      enabled=True
      )
---
code: |
  affidavit_of_care_or_custody_attachment.overflow_fields['children_of_both'].overflow_trigger = 4
  affidavit_of_care_or_custody_attachment.overflow_fields['children_of_both'].label = "Children (continued)"

  affidavit_of_care_or_custody_attachment.overflow_fields['children_of_both[0].previous_addresses'].overflow_trigger = 1
  affidavit_of_care_or_custody_attachment.overflow_fields['children_of_both[1].previous_addresses'].overflow_trigger = 1
  affidavit_of_care_or_custody_attachment.overflow_fields['children_of_both[2].previous_addresses'].overflow_trigger = 1
  affidavit_of_care_or_custody_attachment.overflow_fields['children_of_both[3].previous_addresses'].overflow_trigger = 1


  affidavit_of_care_or_custody_attachment.overflow_fields['other_care_custody_proceedings'].overflow_trigger = 4
  affidavit_of_care_or_custody_attachment.overflow_fields['other_care_custody_proceedings[0].other_parties'].overflow_trigger = 2
  affidavit_of_care_or_custody_attachment.overflow_fields['other_care_custody_proceedings[1].other_parties'].overflow_trigger = 2
  affidavit_of_care_or_custody_attachment.overflow_fields['other_care_custody_proceedings[2].other_parties'].overflow_trigger = 2

  affidavit_of_care_or_custody_attachment.overflow_fields['gals_investigators'].overflow_trigger = 4
  affidavit_of_care_or_custody_attachment.overflow_fields['gals_investigators'].label = "Guardians Ad Litem and Investigators (continued)"

  affidavit_of_care_or_custody_attachment.overflow_fields['attorneys_for_parents'].overflow_trigger = 3
  affidavit_of_care_or_custody_attachment.overflow_fields['attorneys_for_parents'].label = "Attorneys for parents (continued)"

  affidavit_of_care_or_custody_attachment.overflow_fields['attorneys_for_children'].overflow_trigger = 3
  affidavit_of_care_or_custody_attachment.overflow_fields['attorneys_for_children'].label = "Attorneys for children (continued)"

  affidavit_of_care_or_custody_attachment.overflow_fields.gathered = True
---
need: need_other_parties_appendix
attachment:
  variable name: affidavit_of_care_or_custody_attachment.addendum
  name: Affidavit Disclosing Care or Custody Proceedings Appendix
  filename: Affidavit_Disclosing_Care_or_Custody_Appendix
  docx template file: care_or_custody_proceedings_appendix.docx
---
attachment:
  variable name: affidavit_of_care_or_custody_attachment[i]
  skip undefined: True
  name: Affidavit of Care
  filename: Affidavit_of_Care
  # editable: False
  pdf template file: affidavit_disclosing_care_or_custody.pdf
  decimal places: 2
  fields:
    # - "user_name_full": ${ str(users[0]) }
    - "child1_address_on_one_line": ${ children_of_both.item(0).address.on_one_line(include_unit=True) if not confidential_address else ''}
    - "child2_address_on_one_line": ${ children_of_both.item(1).address.on_one_line(include_unit=True)  if not confidential_address else ''}
    - "child3_address_on_one_line": ${ children_of_both.item(2).address.on_one_line(include_unit=True)  if not confidential_address else ''}
    - "child4_address_on_one_line": ${ children_of_both.item(3).address.on_one_line(include_unit=True)  if not confidential_address else ''}
    # - "user_address_on_one_line": ${ users[0].address.on_one_line(include_unit=True)  if not confidential_address else ''}
    # - "user_name_full__1": ${ str(users[0]) }
    # - "child1_address_street": ${ children_of_both.item(0).address.line_one() }
    # - "child1_address_city_state_zip": ${ children_of_both.item(0).address.line_two() }
    # - "child2_address_street": ${ children_of_both.item(1).address.line_one() }
    # - "child2_address_city_state_zip": ${ children_of_both.item(1).address.line_two() }
    # - "child3_address_street": ${ children_of_both.item(2).address.line_one() }
    # - "child3_address_city_state_zip": ${ children_of_both.item(2).address.line_two() }
    # - "user_address_on_one_line__2": ${ users[0].address.on_one_line(include_unit=True) }
    - "case_name": ${ case_name }
    - "court_division_bmc": ${ trial_court.division == "Boston Municipal Court" }
    - "court_division_district_court": ${ trial_court.division == "District Court" }
    - "court_division_juvenile_court": ${ trial_court.division == "Juvenile Court" }
    - "court_division_family_court": ${ trial_court.division == "Probate and Family Court" }
    - "court_division_superior_court": ${ trial_court.division == "Superior Court" }
    # - "child1_name_last_first": ${ children_of_both.item(0).name.lastfirst() }
    # - "child2_name_last_first": ${ children_of_both.item(1).name.lastfirst() }
    # - "child3_name_last_first": ${ children_of_both.item(2).name.lastfirst() }
    # - "child4_name_last_first": ${ children_of_both.item(3).name.lastfirst() }
    - "confidential_address": ${ confidential_address }
    - "ask_impound_affidavit": ""
    - "child1_past_addresses_on_one_line": ${ children_of_both.item(0).previous_addresses if not confidential_address else '' }
    - "child2_past_addresses_on_one_line": ${ children_of_both.item(1).previous_addresses if not confidential_address else '' }
    - "child3_past_addresses_on_one_line": ${ children_of_both.item(2).previous_addresses if not confidential_address else '' }
    - "child4_past_addresses_on_one_line": ${ children_of_both.item(3).previous_addresses if not confidential_address else '' }
    - "has_participated_custody_case": ${ custody_case_participation == "participated" }
    - "dont_know_any_custody_cases": ${ custody_case_participation == "no cases" }
    - "know_of_other_custody_case": ${ custody_case_participation == "know of" }
    - "other_case_1_user_role": ${other_care_custody_proceedings.item(0).role() }
    - "other_case_1_letters": ${ other_care_custody_proceedings.item(0).child_letters() }
    - "other_case_1_court": ${ other_care_custody_proceedings.item(0).court_name }
    - "other_case_1_docket": ${ other_care_custody_proceedings.item(0).docket_number }
    - "other_case_1_status": ${ other_care_custody_proceedings.item(0).status() }
    - "other_case_2_user_role": ${ other_care_custody_proceedings.item(1).role() }
    - "other_case_2_letters": ${ other_care_custody_proceedings.item(1).child_letters() }
    - "other_case_2_court": ${ other_care_custody_proceedings.item(1).court_name }
    - "other_case_2_docket": ${ other_care_custody_proceedings.item(1).docket_number }
    - "other_case_2_status": ${ other_care_custody_proceedings.item(1).status() }
    - "other_case_3_user_role": ${ other_care_custody_proceedings.item(2).role() }
    - "other_case_3_letters": ${ other_care_custody_proceedings.item(2).child_letters()}
    - "other_case_3_court": ${ other_care_custody_proceedings.item(2).court_name }
    - "other_case_3_docket": ${ other_care_custody_proceedings.item(2).docket_number }
    - "other_case_3_status": ${ other_care_custody_proceedings.item(2).status() }
    - "other_case_4_court": ${ other_care_custody_proceedings.item(3).court_name }
    - "other_case_4_docket": ${ other_care_custody_proceedings.item(3).docket_number }
    - "other_case_4_letters": ${ other_care_custody_proceedings.item(3).child_letters() }
    - "other_case_4_status": ${ other_care_custody_proceedings.item(3).status() }
    - "other_case_4_user_role": ${ other_care_custody_proceedings.item(3).role() }

    - "other_case_other_parties_1_letters": ${ filter_letters(others_in_proceedings.item(0).child_letters) }
    - "other_case_other_parties_1_names": ${ others_in_proceedings.item(0) }
    - "other_case_other_parties_1_address_on_one_line": ${ others_in_proceedings.item(0).address.on_one_line(include_unit=True) }
    - "other_case_other_parties_2_letters": ${ filter_letters(others_in_proceedings.item(1).child_letters) }
    - "other_case_other_parties_2_names": ${ others_in_proceedings.item(1) }
    - "other_case_other_parties_2_address_on_one_line": ${ others_in_proceedings.item(1).address.on_one_line(include_unit=True) }
    - "other_case_other_parties_3_names": ${ others_in_proceedings.item(2) }
    - "other_case_other_parties_3_address_on_one_line": ${ others_in_proceedings.item(2).address.on_one_line(include_unit=True) }
    - "other_case_other_parties_3_letters": ${ filter_letters(others_in_proceedings.item(2).child_letters) }
    - "impound_affidavit": ${ impound_affidavit }
    # - "day": ${ day }
    # - "month": ${ month }
    # - "year": ${ year }
    # - "attorney_for_juvenile_address_on_one_line": ${ signing_attorney.address.on_one_line(include_unit=True) if needs_attorney_signature else '' }
    - "child1_past_addresses_1": |
        % if not confidential_address:
        ${ children_of_both.item(0).previous_addresses.item(0).on_one_line() }
        % endif
    - "child1_past_addresses_2": |
        % if not confidential_address:
        ${ children_of_both.item(0).previous_addresses.item(1).on_one_line() }
        % endif
    - "child2_past_addresses_1": |
        % if not confidential_address:
        ${ children_of_both.item(1).previous_addresses.item(0).on_one_line() }
        % endif
    - "child2_past_addresses_2": |
        % if not confidential_address:
        ${ children_of_both.item(1).previous_addresses.item(1).on_one_line() }
        % endif
    - "child3_past_addresses_1": |
        % if not confidential_address:
        ${ children_of_both.item(2).previous_addresses.item(0).on_one_line() }
        % endif
    - "child3_past_addresses_2": |
        % if not confidential_address:
        ${ children_of_both.item(2).previous_addresses.item(1).on_one_line() }
        % endif
    - "child1_address1_adults_lives_with": |
        % if not confidential_address:
        ${ children_of_both.item(0).lives_with }

        ${ children_of_both.item(0).relationship }
        % endif
    - "child1_address1_start_date": |
        % if not confidential_address:
        ${ children_of_both.item(0).previous_addresses.item(0).start_date }
        % endif
    - "child1_address2_adults_lives_with": |
        % if not confidential_address:
        ${ children_of_both.item(0).previous_addresses.item(1).lives_with }

        ${ children_of_both.item(0).previous_addresses.item(1).relationship }
        % endif
    - "child1_address2_end_date": |
        % if not confidential_address:
        ${ children_of_both.item(0).previous_addresses.item(1).end_date }
        % endif
    - "child1_address2_start_date": |
        % if not confidential_address:
        ${ children_of_both.item(0).previous_addresses.item(1).start_date }
        % endif
    - "child1_name_full": |
        % if not confidential_address:
        ${ children_of_both.item(0) }
        % endif
    - "child2_address1_adults_lives_with": |
        % if not confidential_address:
        ${ children_of_both.item(1).lives_with }

        ${ children_of_both.item(1).relationship }
        % endif
    - "child2_address1_start_date": |
        % if not confidential_address:
        ${ children_of_both.item(1).previous_addresses.item(0).start_date }
        % endif
    - "child2_address2_adults_lives_with": |
        % if not confidential_address:
        ${ children_of_both.item(1).previous_addresses.item(1).lives_with }

        ${ children_of_both.item(1).previous_addresses.item(1).relationship }
        % endif
    - "child2_address2_end_date": |
        % if not confidential_address:
        ${ children_of_both.item(1).previous_addresses.item(1).end_date }
        % endif
    - "child2_address2_start_date": |
        % if not confidential_address:
        ${ children_of_both.item(1).previous_addresses.item(1).start_date }
        % endif
    - "child2_name_full": |
        % if not confidential_address:
        ${ children_of_both.item(1) }
        % endif
    - "child3_address1_adults_lives_with": |
        % if not confidential_address:
        ${ children_of_both.item(2).lives_with }

        ${ children_of_both.item(2).relationship }
        % endif
    - "child3_address1_end_date": |
        % if not confidential_address:
        ${ children_of_both.item(2).previous_addresses.item(0).end_date }
        % endif
    - "child3_address1_start_date": |
        % if not confidential_address:
        ${ children_of_both.item(2).previous_addresses.item(0).start_date }
        % endif
    - "child3_address2_adults_lives_with": |
        % if not confidential_address:
        ${ children_of_both.item(2).previous_addresses.item(1).lives_with }

        ${ children_of_both.item(2).previous_addresses.item(1).relationship }
        % endif
    - "child3_address2_end_date": |
        % if not confidential_address:
        ${ children_of_both.item(2).previous_addresses.item(1).end_date }
        % endif
    - "child3_address2_start_date": |
        % if not confidential_address:
        ${ children_of_both.item(2).previous_addresses.item(1).start_date }
        % endif
    - "child3_name_full": |
        % if not confidential_address:
        ${ children_of_both.item(2) }
        % endif
    - "child4_address_on_one_line": |
        % if not confidential_address:
        ${ children_of_both.item(3).address.on_one_line(include_unit=True) }
        % endif
    - "child4_address1_adults_lives_with": |
        % if not confidential_address:
        ${ children_of_both.item(3).previous_addresses.item(0).lives_with }

        ${ children_of_both.item(3).previous_addresses.item(0).relationship }
        % endif
    - "child4_address1_end_date": |
        % if not confidential_address:
        ${ children_of_both.item(3).previous_addresses.item(0).end_date }
        % endif
    - "child4_address1_start_date": |
        % if not confidential_address:
        ${ children_of_both.item(3).previous_addresses.item(0).start_date }
        % endif
    - "child4_address2_adults_lives_with": |
        % if not confidential_address:
        ${ children_of_both.item(3).previous_addresses.item(1).lives_with }

        ${ children_of_both.item(3).previous_addresses.item(1).relationship }
        % endif
    - "child4_address2_end_date": |
        % if not confidential_address:
        ${ children_of_both.item(3).previous_addresses.item(1).end_date }
        % endif
    - "child4_address2_start_date": |
        % if not confidential_address:
        ${ children_of_both.item(3).previous_addresses.item(1).start_date }
        % endif
    - "child4_name_full": |
        % if not confidential_address:
        ${ children_of_both.item(3) }
        % endif
    - "child4_past_addresses_on_one_line": |
        % if not confidential_address:
        ${ children_of_both.item(3).previous_addresses }
        % endif
    # - "attorney_for_children_1": ${ str(attorneys_for_children.item(0)) +  ' (' + str(attorneys_for_children.item(0).represented_children) + ')' if defined('attorneys_for_children[0]') else ''}
    # - "attorney_for_children_2": ${ str(attorneys_for_children.item(1)) +  ' (' + str(attorneys_for_children.item(1).represented_children) + ')' if defined('attorneys_for_children[1]') else ''}
    # - "attorney_for_children_3": ${ str(attorneys_for_children.item(2)) +  ' (' + str(attorneys_for_children.item(2).represented_children) + ')' if defined('attorneys_for_children[2]') else ''}
    # - "gals_investigators_1": ${ gals_investigators.item(0).status()}
    # - "gals_investigators_2": ${ gals_investigators.item(1).status()}
    # - "gals_investigators_3": ${ gals_investigators.item(2).status()}
    # - "attorneys_for_parents_1": ${ str(attorneys_for_parents.item(0)) + ' (' + str(attorneys_for_parents.item(0).represented_party) + ')' if defined('attorneys_for_parents[0]') else ''}
    # - "attorneys_for_parents_2": ${ str(attorneys_for_parents.item(1)) +  ' (' + str(attorneys_for_parents.item(1).represented_party) + ')' if defined('attorneys_for_parents[1]') else ''}
    # - "attorneys_for_parents_3": ${ str(attorneys_for_parents.item(2)) + ' (' + str(attorneys_for_parents.item(2).represented_party) + ')' if defined('attorneys_for_parents[2]') else ''}
    # - "user_signature": ${ f"/s/ {users[0]}" if esign else "" }

    - "child_1_has_appointed_gal_etc_yes": ${ children[0].has_gal }
    - "child_1_has_appointed_gal_etc_no": ${ children[0].has_gal == False }
    - "child_1_has_appointed_gal_etc_unknown": ${ children[0].has_gal == None }
    - "child_1_appointed_gal_etc_names": ${ comma_list([f"{gal} ({gal.role})" for gal in children[0].gals.complete_elements()]) }
    - "child_2_appointed_gal_etc_names": ${ comma_list([f"{gal} ({gal.role})" for gal in children[1].gals.complete_elements()]) }
    - "child_2_has_appointed_gal_etc_yes": ${ children[1].has_gal }
    - "child_2_has_appointed_gal_etc_no": ${ children[1].has_gal == False }
    - "child_2_has_appointed_gal_etc_unknown": ${ children[1].has_gal == None }
    - "child_3_appointed_gal_etc_names": ${ comma_list([f"{gal} ({gal.role})" for gal in children[2].gals.complete_elements()]) }
    - "child_3_has_appointed_gal_etc_yes": ${ children[2].has_gal }
    - "child_3_has_appointed_gal_etc_no": ${ children[2].has_gal == False }
    - "child_3_has_appointed_gal_etc_unknown": ${ children[2].has_gal == None }
    - "child_4_appointed_gal_etc_names": ${ comma_list([f"{gal} ({gal.role})" for gal in children[3].gals.complete_elements()]) }
    - "child_4_has_appointed_gal_etc_yes": ${ children[3].has_gal }
    - "child_4_has_appointed_gal_etc_no": ${ children[3].has_gal == False }
    - "child_4_has_appointed_gal_etc_unknown": ${ children[3].has_gal == None }
    - "has_attorney": ${ needs_attorney_signature }
    - "no_attorney": ${ not needs_attorney_signature }
    - "no_confidential_addresses": ${ not confidential_address }
    - "other_case_other_parties_4_address_on_one_line": ${ others_in_proceedings.item(3).address.on_one_line(include_unit=True) }
    - "other_case_other_parties_4_letters": ${ filter_letters(others_in_proceedings.item(3).child_letters) }
    - "other_case_other_parties_4_names": ${ others_in_proceedings.item(3) }
    - "signer_is_attorney": ${ attorneys.there_are_any and attorneys.is_petitioner_minor_or_incompetent}
    - "trial_court_division": ${ trial_court.division }
    - "users1_address_block": ${ users[0].address.block() }
    - "users1_address_on_one_line__1": ${ users[0].address.on_one_line(include_unit=True) }
    - "users1_email": ${ users[0].email }
    - "users1_phone_numbers": ${ users[0].phone_numbers() }
    - "users1_signature":  ${ user.signature }
    - "trial_court_division": ${ trial_court.division }
    - "party_name_attorney": ${ party_name_attorney }
    - "party_name_no_attorney": ${ party_name_no_attorney }
    - "attorneys1_bbo": |
        % if attorneys.there_are_any and attorneys.is_petitioner_minor_or_incompetent:
        ${ attorneys[0].bbo_number }
        % endif
    - "attorneys1_name_full": |
        % if attorneys.there_are_any and attorneys.is_petitioner_minor_or_incompetent:
        ${ attorneys[0] }
        % endif
    - "signature_date": ${ signature_date }
    - "signature_date__1": ${ signature_date }
---
id: care or custody intro
continue button field: affidavit_disclosing_care_or_custody_intro
question: |
  Affidavit Disclosing Care or Custody Proceedings
subquestion: |
  As part of the petition for guardianship, the court needs to know about any
  other cases involving the care or custody of 
  % if (al_person_answering == 'parent'):
  your children. This includes cases where you, another parent, or someone else 
  has been involved in a court case about the care or custody of 
  ${ children[0].familiar() }.

  If ${ children[0].familiar() } has been involved in any court cases about their 
  custody or care, then you must submit an *Affidavit Disclosing Care or Custody 
  Proceeding*.

  This helps the court find out about any open or closed cases related to the care 
  and/or custody of ${ children[0].familiar() } and get a better picture of their
  situation.
  % else:
  ${ children[0].familiar() }. This includes cases where you, 
  ${ children[0].familiar() }'s parents, or someone else has been involved in a
  court case about the care or custody of ${ children[0].familiar() }.

  If ${ children[0].familiar() } has been involved in any court cases about their 
  custody or care, then you must submit an *Affidavit Disclosing Care or Custody 
  Proceeding*.

  This helps the court find out about any open or closed cases related to the care 
  and/or custody of ${ children[0].familiar() } and get a better picture of their
  situation.
  % endif
---
code: |
  # Trigger computed values
  case_name
  confidential_address
  has_participated_custody_case
  know_of_other_custody_case
  impound_affidavit
  day
  month
  year
  trigger_aff_care_or_custody_computed_variables = True
---
code: |  
  form_filled_by_attorney = bool(len(attorneys))
---
id: attorneys there_are_any
question: |
  Are you the attorney for the person who needs to tell the court about their children's cases?
subquestion: |
fields:
  - Are you the attorney?: attorneys.there_are_any
    datatype: radio
    choices:
      - Yes, I am the attorney: True
      - No, I am the person making the petition: False
  - note: |
      <div class="alert alert-info" role="alert" style="white-space: normal; overflow: visible;">
        <p><i class="fas fa-info-circle"></i>
          This "Child care or custody disclosure affidavit" must be signed by the person who is part of the case, not their attorney, unless:
          <ul>
            <li>the person who is part of the case is under 18, or</li>
            <li>the person who is part of the case is not competent.</li>
          </ul>
        </p>
      </div>
    show if: attorneys.there_are_any
  - Is the person who is part of this case under 18 or not competent?: attorneys.is_petitioner_minor_or_incompetent
    show if: attorneys.there_are_any
    datatype: yesnoradio
---
id: attorney's name
question: |
  Information about the attorney
fields:
  - Name: attorneys[0].name.first
  - BBO number: attorneys[0].bbo_number
---
code: |
  if attorneys.number() >= 1:
    attorneys.there_is_another = False      
---
code: |
  attorneys[i].name.first
  attorneys[i].bbo_number
  attorneys[i].complete = True