---
translations:
  - petition_for_removal_of_guardian_es.xlsx
---
include:
  - docassemble.ALAffidavitOfIndigency:affidavit_body.yml
  - docassemble.AssemblyLine:assembly_line.yml
  - docassemble.MassAccess:massaccess.yml
  - shared.yml
  - military_affidavit.yml
  - application_for_appointment.yml
  - affidavit_disclosing_care_or_custody.yml
  - customized_screens.yml
  - temporary_guardian.yml
---
metadata:
  title: >-
    Petition to Remove a Guardian
  short title: >-
    Petition to Remove a Guardian
  description: |-
    If your child, or the child of someone you care about,
    has a guardian and you believe the guardian should be removed or replaced, 
    you can use this interview to ask the court to remove the guardian.

    It will help you make a petition to remove a guardian and optionally, let you
    name a new guardian.

    It can also help you make up to 5 other forms that you
    may need to file with your petition. The other forms include:

    * Petition to appoint a temporary guardian
    * Request to get a lawyer (for a parent)
    * Child Care or Custody Disclosure Affidavit
    * Military affidavit
    * Fee waiver application (also called an affidavit of indigency)
  can_I_use_this_form: |
    You can use this interview if you are either:

    * A parent, or
    * Someone **else** who cares about a child and wants to ask the court to remove a guardian.
  before_you_start: |
    Before you start this interview, you should get information about:

    * The guardianship case, including the name of the court and the case number (docket number)
    * The child, including their birthdate and address
    * The names, contact information, and other facts about the child's parents
    * The name of the child's current guardian
    * The names, contact information, and other facts about any new guardian that you want to ask the judge to appoint
  maturity: production
  estimated_completion_minutes: 20
  estimated_completion_delta: 10
  languages:
    - en
  LIST_topics:
    - ES-03-03-00-00
    - FA-04-00-00-00
  tags:
    - ES-03-03-00-00
    - FA-04B-00-00-00
  authors:
    - Rami Lorca
    - Quinten Steenhuis
  allowed_courts:
    - "Probate and Family Court"
  typical_role: "unknown"
  al_weaver_version: "playground"
  generated_on: "2024-02-13"
  form_titles:
    - Petition for Removal of Guardian of Minor
    - Motion to Appoint Temporary Guardian
    - Military Affidavit
    - Application for Appointment of Counsel
    - Child Care or Custody Disclosure Affidavit
    - Affidavit of Indigency
  form_numbers:
    - MPC 240
    - OCAJ-1
    - TC0002
    - MPC 263
    - MPC 340
  original_form_published_on: 2011-05-03
  jurisdiction: NAM-US-US+MA
  help_page_url: https://www.masslegalhelp.org/children-families-divorce/guardians-other-caregivers/guardianship-minor-overview
  help_page_title: "Guardianship of a Minor: An Overview"
  review_date: "2024-11-03"
  update_notes: |
    2024-11-03 Added metadata
---
code: |
  # This controls the default country and list of states in address field questions
  AL_DEFAULT_COUNTRY = "US"
---
code: |
  # This controls the default state in address field questions
  AL_DEFAULT_STATE = "MA"
---
code: |
  github_repo_name = 'docassemble-PetitionForRemovalOfGuardianOfMinor'
---
code: |
  interview_short_title = "Ask the court to remove a guardian for a minor"
---
language: es
code: |
  interview_short_title = "Pida al tribunal que remueva a un tutor de un menor"
---
code: |
  al_form_type = "other"
---
objects:
  - responsible_parents: ALPeopleList.using(ask_number=True, complete_attribute="complete")
---
code: |
  enable_al_nav_sections = True
---
code: |
  al_interview_languages = ["en", "es"]
---
reconsider: True
variable name: al_nav_sections
data from code:
  - review_case_information: |
      "About the case"
  - review_petitioner_information: |
      "Petitioners"
  - review_guardian_information: |
      "Guardians"
  - review_requests: |
      "What you need"
  - review_affidavit_disclosing_care_or_custody: |
      "Child Care or Custody Disclosure Affidavit"
    hidden: |
      showifdef("who_is_making_petition") == "minor"
  - review_military_affidavit: |
      "Military affidavit"
  - section_fee_waiver: |
      "Fee waiver"
    hidden: |
      showifdef("who_is_making_petition") == "minor"
  - review_petition_for_removal_of_guardian: |
      "Review your answers"
---
language: es
reconsider: True
variable name: al_nav_sections
data from code:
  - review_case_information: |
      "Sobre el caso"
  - review_petitioner_information: |
      "Solicitantes"
  - review_guardian_information: |
      "Tutores"
  - review_requests: |
      "Lo que necesitas"
  - review_affidavit_disclosing_care_or_custody: |
      "Declaración de cuidado o custodia de menores"
    hidden: |
      showifdef("who_is_making_petition") == "minor"
  - review_military_affidavit: |
      "Declaración militar"
  - section_fee_waiver: |
      "Exención de tarifas"
    hidden: |
      showifdef("who_is_making_petition") == "minor"
  - review_petition_for_removal_of_guardian: |
      "Revisar tus respuestas"

---
#################### Interview order #####################
comment: |
  Controls order and branching logic for questions specific to this form
id: interview_order_petition_for_removal_of_guardian
code: |
  # Set the allowed courts for this interview
  allowed_courts = ['Probate and Family Court']

  nav.set_section("review_case_information")
  form_filled_by_attorney

  who_is_making_petition

  if who_is_making_petition == "interested_party":
    appointment_petition_notice
 
  children.gather()
  if who_is_making_petition == 'minor':
    for child in children:
      child.birthdate
      if child.age_in_years() < 14:
        minor_age_kickout
      child.phone_number

  trial_court
  docket_number

  nav.set_section("review_petitioner_information")
  if who_is_making_petition == "interested_party" or who_is_making_petition == "parent":
    users.gather()
  else:
    set_user_to_minor
  
  set_parent_relationships

  nav.set_section("review_guardian_information")
  guardians.gather()

  nav.set_section("review_requests")
  bio_parents_can_resume_responsibilities

  if bio_parents_can_resume_responsibilities: 
    if who_is_making_petition == "parent": 
      petitioner_parents_resuming_responsibility
      set_petitioners_as_responsible_parents
    else:
      number_of_responsible_parents
      set_number_of_responsible_parents
    responsible_parents.gather()

  parents_cancel_requested_guardians
  if not bio_parents_can_resume_responsibilities:
    if requested_guardians.there_are_any: 
      requested_guardians.gather()
  
  if requested_temporary_guardians.there_are_any:
    interview_order_temporary_guardian

  interview_order_petition_for_removal_of_guardian = True
---
###################### Main order ######################
comment: |
  This block includes the logic for standalone interviews.
  Delete mandatory: True to include in another interview
mandatory: True
code: |
  al_intro_screen
  petition_for_removal_of_guardian_intro
  set_guardian_removal
  interview_order_petition_for_removal_of_guardian

  if who_is_making_petition != 'minor':
    nav.set_section("review_affidavit_disclosing_care_or_custody")
    interview_order_affidavit_disclosing_care_or_custody

  nav.set_section("review_military_affidavit")
  military_affidavit_intro
  knows_status_already
  interview_order_military_affidavit
  military_affidavit_case_name

  if who_is_making_petition != 'minor':
    nav.set_section("section_fee_waiver")
    if wants_fee_waiver:
      set_fee_waiver_defaults
      ask_affidavit_questions

    if not form_filled_by_attorney:
      if who_is_making_petition == 'parent':
        parent_wants_lawyer

  set_application_for_appointment_of_counsel

  nav.set_section("section_download_petition")
  if esign:
    signature_date
  petition_for_removal_of_guardian_download
---
id: petition_for_removal_of_guardian
continue button field: petition_for_removal_of_guardian_intro
question: |
  Ask the court to remove a guardian for a minor
subquestion: |
  This form can help you if you are involved in a guardianship case for a minor and 
  believe that the minor's {guardian} should be replaced or removed.
  
  You can use this form to end the guardianship or to replace the guardian if:

    * you or a minor you know has a court-appointed guardian, **and** 
    * you have a reason for the guardian to be removed or replaced.

  You will need to explain why the guardian should be removed or replaced.

  <h2 class="h4">Before you get started</h2>

  Please gather:

  1. Information about the minor's parents, including name, contact information, and whether they are living.
  2. Information about anyone **else** who has taken care of the minor over the last 60 days.
  3. Information about **other court cases** that have to do with the minor.
  4. Your own financial information, unless you are the minor.

  <h2 class="h4">When you are finished</h2>

  You need to print and file the documents that this interview makes with the court.

  Some of the documents may need to be signed in front of a notary public.

  Most people take about 20 minutes to finish this interview.
terms:
  guardian: |
    A guardian for a minor is an adult who gets permission from a judge to make decisions for someone who is under 18.
---
#################### Object Blocks Start #####################
---
code: |
  users[i].name.first
  users[i].address.address
  if i == 0 and who_is_making_petition == "interested_party":
    my_interest_is
  users[i].complete = True
---
code: |
  parents[i].name.first
  parents[i].complete = True
---
code: |
  responsible_parents[i].name.first
  responsible_parents[i].complete = True
---
code: |
  children[i].name.first
  children[i].birthdate
  children[i].complete = True
---
code: |
  attorneys[i].name.first
  attorneys[i].address.address
  attorneys[i].complete = True
---
code: |
  requested_guardians[i].name.first
  requested_guardians[i].address.address
  requested_guardians[i].complete = True
---
code: |
  children.there_is_another = False
---
code: |
  if who_is_making_petition == "minor":
    users.there_is_another = False
---
code: |
  attorneys.there_is_another = False
---
code: |
  if who_is_making_petition == "minor":
    users[0].name.first = children[0].name.first
    users[0].name.last = children[0].name.last
    users[0].name.middle = children[0].name.middle
    users[0].name.suffix = children[0].name.suffix
    users[0].address.address = children[0].address.address
    users[0].address.unit = children[0].address.unit
    users[0].address.city = children[0].address.city
    users[0].address.state = children[0].address.state
    users[0].address.zip = children[0].address.zip
    users[0].phone_number = children[0].phone_number
    users[0].relationship_to_minor = "Self"
    users.auto_gather = False
    users.gathered = True
  set_user_to_minor = True
---
id: petitioner parents assuming responsibility
question: |
  Parents resuming responsibility
fields:
  - Which of ${ children[0].familiar() }'s parents are resuming responsibility for ${ children[0].familiar() }?: petitioner_parents_resuming_responsibility
    datatype: checkboxes
    none of the above: False
    minlength: 1
    choices:
      - ${ users[0] }: first_petitioner
      - ${ f"{users[1]}" if (len(users.complete_elements()) > 1) else f"{children[0].familiar()}'s Other parent" }: second_petitioner
---
code: |
  if who_is_making_petition == "parent":
    if len(users.complete_elements()) > 1:
      if petitioner_parents_resuming_responsibility['first_petitioner'] \
      and petitioner_parents_resuming_responsibility['second_petitioner']:
        responsible_parents.target_number = 2
        responsible_parents[0].name.first = users[0].name.first
        responsible_parents[0].name.last = users[0].name.last
        responsible_parents[0].name.middle = users[0].name.middle
        responsible_parents[0].name.suffix = users[0].name.suffix
        responsible_parents[0].address.address = users[0].address.address
        responsible_parents[0].address.unit = users[0].address.unit
        responsible_parents[0].address.city = users[0].address.city
        responsible_parents[0].address.state = users[0].address.state
        responsible_parents[0].address.zip = users[0].address.zip
        responsible_parents[0].phone_number = users[0].phone_number
        responsible_parents[1].name.first = users[1].name.first
        responsible_parents[1].name.last = users[1].name.last
        responsible_parents[1].name.middle = users[1].name.middle
        responsible_parents[1].name.suffix = users[1].name.suffix
        responsible_parents[1].address.address = users[1].address.address
        responsible_parents[1].address.unit = users[1].address.unit
        responsible_parents[1].address.city = users[1].address.city
        responsible_parents[1].address.state = users[1].address.state
        responsible_parents[1].address.zip = users[1].address.zip
        responsible_parents[1].phone_number = users[1].phone_number
      elif petitioner_parents_resuming_responsibility['first_petitioner'] \
      and (not petitioner_parents_resuming_responsibility['second_petitioner']):
        responsible_parents.target_number = 1
        responsible_parents[0].name.first = users[0].name.first
        responsible_parents[0].name.last = users[0].name.last
        responsible_parents[0].name.middle = users[0].name.middle
        responsible_parents[0].name.suffix = users[0].name.suffix
        responsible_parents[0].address.address = users[0].address.address
        responsible_parents[0].address.unit = users[0].address.unit
        responsible_parents[0].address.city = users[0].address.city
        responsible_parents[0].address.state = users[0].address.state
        responsible_parents[0].address.zip = users[0].address.zip
        responsible_parents[0].phone_number = users[0].phone_number
      elif (not petitioner_parents_resuming_responsibility['first_petitioner']) \
      and petitioner_parents_resuming_responsibility['second_petitioner']:
        responsible_parents.target_number = 1
        responsible_parents[0].name.first = users[1].name.first
        responsible_parents[0].name.last = users[1].name.last
        responsible_parents[0].name.middle = users[1].name.middle
        responsible_parents[0].name.suffix = users[1].name.suffix
        responsible_parents[0].address.address = users[1].address.address
        responsible_parents[0].address.unit = users[1].address.unit
        responsible_parents[0].address.city = users[1].address.city
        responsible_parents[0].address.state = users[1].address.state
        responsible_parents[0].address.zip = users[1].address.zip
        responsible_parents[0].phone_number = users[1].phone_number
    else:
      if petitioner_parents_resuming_responsibility['first_petitioner'] \
      and petitioner_parents_resuming_responsibility['second_petitioner']:
        responsible_parents.target_number = 2
        responsible_parents[0].name.first = users[0].name.first
        responsible_parents[0].name.last = users[0].name.last
        responsible_parents[0].name.middle = users[0].name.middle
        responsible_parents[0].name.suffix = users[0].name.suffix
        responsible_parents[0].address.address = users[0].address.address
        responsible_parents[0].address.unit = users[0].address.unit
        responsible_parents[0].address.city = users[0].address.city
        responsible_parents[0].address.state = users[0].address.state
        responsible_parents[0].address.zip = users[0].address.zip
        responsible_parents[0].phone_number = users[0].phone_number
      elif petitioner_parents_resuming_responsibility['first_petitioner'] \
      and (not petitioner_parents_resuming_responsibility['second_petitioner']):
        responsible_parents.target_number = 1
        responsible_parents[0].name.first = users[0].name.first
        responsible_parents[0].name.last = users[0].name.last
        responsible_parents[0].name.middle = users[0].name.middle
        responsible_parents[0].name.suffix = users[0].name.suffix
        responsible_parents[0].address.address = users[0].address.address
        responsible_parents[0].address.unit = users[0].address.unit
        responsible_parents[0].address.city = users[0].address.city
        responsible_parents[0].address.state = users[0].address.state
        responsible_parents[0].address.zip = users[0].address.zip
        responsible_parents[0].phone_number = users[0].phone_number
      elif (not petitioner_parents_resuming_responsibility['first_petitioner']) \
      and petitioner_parents_resuming_responsibility['second_petitioner']:
        responsible_parents.target_number = 1

  set_petitioners_as_responsible_parents = True
---
id: how many parents resuming responsibility
question: |
  How many of ${ children[0].familiar() }'s parents are resuming responsibility for their care?
fields:
  - Choose up to two parents: number_of_responsible_parents
    datatype: radio
    choices:
      - One parent: one_parent
      - Both parents: both_parents
---
code: |
  if number_of_responsible_parents == "one_parent":
    responsible_parents.target_number = 1
  elif number_of_responsible_parents == "both_parents":
    responsible_parents.target_number = 2

  set_number_of_responsible_parents = True
---
code: |
  affidavitofindigency_attachment.enabled = who_is_making_petition != "minor" and wants_fee_waiver and is_indigent
---
code: |
  if who_is_making_petition != 'minor':
    if not form_filled_by_attorney:
      if who_is_making_petition == 'parent':
        if parent_wants_lawyer:
          Application_for_appointment_attachment.enabled = True
  
  set_application_for_appointment_of_counsel = True
---
code: |
  petitioner_requesting_guardianship = False
---
code: |
  if bio_parents_can_resume_responsibilities:
    requested_guardians.there_are_any = False
  
  parents_cancel_requested_guardians = True
---
code: |
  if who_is_making_petition == "parent":
    for user in users:
      user.relationship_to_minor = "Parent"

  set_parent_relationships = True
---
code: |
  guardian_removal = True
  set_guardian_removal = True
---
code: |
  user_ask_role = "plaintiff"
---
#################### Object Blocks End #####################
---
#################### Question Blocks Start #####################
---
id: petitioner information
sets:
  - users[0].name.first
  - users[0].name.last
  - users[0].name.middle
  - users[0].name.suffix
  - users[0].address.address
  - users[0].address.unit
  - users[0].address.city
  - users[0].address.state
  - users[0].address.zip
  - users[0].address.country
  - users[0].phone_number
question: |
  % if form_filled_by_attorney:
  Tell us about the petitioner
  % else:
  Tell us about yourself
  % endif
fields:
  - code: |
      users[0].name_fields()
  - code: |
      users[0].address_fields(country_code=AL_DEFAULT_COUNTRY, default_state=AL_DEFAULT_STATE, show_country=False)
  - Primary phone number: users[0].phone_number
    datatype: al_international_phone
    required: False
---
id: petitioner information
sets:
  - users[i].name.first
  - users[i].name.last
  - users[i].name.middle
  - users[i].name.suffix
  - users[i].address.address
  - users[i].address.unit
  - users[i].address.city
  - users[i].address.state
  - users[i].address.zip
  - users[i].address.country
  - users[i].phone_number
question: |
  % if who_is_making_petition == "parent":
  Tell us about the other parent making this Petition
  % else:
  Tell us about the other petitioner
  % endif
fields:
  - code: |
      users[i].name_fields()
  - code: |
      users[i].address_fields(country_code=AL_DEFAULT_COUNTRY, default_state=AL_DEFAULT_STATE, show_country=False)
  - Primary phone number: users[i].phone_number
    datatype: al_international_phone
    required: False
validation code: |
  if len(users.complete_elements()) > 0:
    users.there_is_another = False
---
id: users there_is_another
question: |
  % if form_filled_by_attorney and who_is_making_petition == "parent":
  Is there another parent making this Petition with your client?
  % elif who_is_making_petition == "parent":
  Is there another parent making this Petition with you?
  % elif form_filled_by_attorney and who_is_making_petition == "interested_party":
  Is anyone else making this Petition with your client?
  % else:
  Is anyone else making this Petition with you?
  % endif
fields:
  - no label: users.there_is_another
    datatype: yesnoradio
---
id: minor info
sets:
  - children[0].name.first
  - children[0].name.last
  - children[0].name.middle
  - children[0].name.suffix
  - children[0].address.address
  - children[0].address.unit
  - children[0].address.city
  - children[0].address.state
  - children[0].address.zip
  - children[0].address.country
question: |
  % if who_is_making_petition == "minor" and (not form_filled_by_attorney):
  Tell us about yourself
  % else:
  Who is the minor in this case?
  % endif
fields:
  - code: |
      children[0].name_fields()
  - code: |
      children[0].address_fields(country_code=AL_DEFAULT_COUNTRY, default_state=AL_DEFAULT_STATE, show_country=False)
---
id: minor birthdate
question: |
  % if who_is_making_petition == "minor" and (not form_filled_by_attorney):
  When were you born?
  % else:
  When was ${ children.familiar() } born?
  % endif
fields:
  - Birthdate: children[0].birthdate
    datatype: Birthdate
---
id: minor age kickout
event: minor_age_kickout
question: |
  We're sorry, but you cannot use this tool to create a *Petition for Removal of Guardian of Minor*
subquestion: |
  A minor needs to be **at least 14 years** old to fill out this petition for themselves.

  If you made a mistake, select **Undo** to go back and change your answer.
---
id: minor phone number
sets:
  - children[0].phone_number
question: |
  % if who_is_making_petition == "minor" and (not form_filled_by_attorney):
  What is your phone number?
  % else:
  What is ${ children.familiar() }'s phone number?
  % endif
fields:
  - Primary phone number: children[0].phone_number
    datatype: al_international_phone
    required: False
---
id: waiving_cost
question: |
  You may qualify for a fee waiver
subquestion: |
  There is no filing fee to ask for a guardian. 

  But you may need to pay:

  * A $15 citation fee
  * And a fee to **serve** (give) the papers to the other people who need to know about this case,
    or to publish notice if you cannot find them to serve them in person.

  The judge may also want to know your income to decide if you can afford to
  guarantee the **surety bond**.

  If you earn under a certain amount, you can ask the court to help pay the citation fee,
  serve the papers and to waive the surety bond.
fields:
  - Do you want to find out if you qualify for a fee waiver?: wants_fee_waiver
    datatype: yesnoradio
---
id: relationship to minor
question: |
  What is
  % if i == 0:
  your
  % else:
  ${ users[i] }'s 
  % endif
  relationship to ${ children.familiar() }?
fields:
  - I am ${ children.familiar() }'s: users[i].relationship_to_minor
---
id: nature of interest in minor's welfare
question: |
  What is the nature of
  % if i == 0:
  your
  % else:
  ${ users[i] }'s 
  % endif
  interest in ${ children.familiar() }'s welfare?
fields:
  - Explain: my_interest_is
    datatype: area
---
id: choose a court
question: |
  What court is your case in?
subquestion: |
  **Check the case documents to make sure you select the correct court.**

  % if len(all_matches) and all_courts.filter_courts(allowed_courts):
  % if who_is_making_petition == "minor":
  Because you live in ${ children[0].address.city }, we think the court
  might be ${ court_short_label(all_matches[0]) }.
  % else:
  Because ${ children[0].familiar() } lives in ${ children[0].address.city }, 
  we think the court might be ${ court_short_label(all_matches[0]) }.
  % endif

  ${ map_of(combined_locations(all_matches)) }

  % endif

fields:
  - The case in is: trial_court
    datatype: object
    object labeler: court_short_label
    choices: all_courts.filter_courts(allowed_courts)
    default: |
      next(iter(all_matches), None)
---
id: docket number
question: |
  What is your docket number?
fields:
  - Docket number: docket_number
    maxlength: 25
    required: False
    help: |
      If there is already a case for the guardianship of ${ children[0].familiar() if len(children.complete_elements()) > 0 else f"the minor" }, the docket number will written on the court papers. If you
      don't have a docket number, or can't find one, you can leave this blank.
---
id: requested_guardians information
sets:
  - requested_guardians[i].name.first
  - requested_guardians[i].name.last
  - requested_guardians[i].name.middle
  - requested_guardians[i].name.suffix
question: |
  % if who_is_making_petition == "minor" and (not form_filled_by_attorney):
  Tell us about the ${ ordinal(i) } new guardian you want for yourself
  % else:
  Tell us about the ${ ordinal(i) } new guardian you want for ${ children.familiar() }
  % endif
fields:
  - code: |
      requested_guardians[i].name_fields()
validation code: |
  if len(requested_guardians.complete_elements()) > 0:
    requested_guardians.there_is_another = False
---
id: requested_guardians there_is_another
question: |
  % if who_is_making_petition == "minor" and (not form_filled_by_attorney):
  Do you want to ask for a second new guardian for yourself?
  % else:
  Do you want to ask for a second new guardian for ${ children.familiar() }?
  % endif
fields:
  - Choose one: requested_guardians.there_is_another
    datatype: yesnoradio
---
id: requested_guardians there_are_any
question: |
  New guardians
subquestion: |
  You can ask the court to name **up to two people** as new guardians for ${ children.familiar() }.
fields:
  - Do you want someone else to be ${ children.familiar() }'s new guardian?: requested_guardians.there_are_any
    datatype: yesnoradio
---
id: requested_guardians there_is_another
question: |
  Add another new guardian?
fields:
  - Do you want to add another person as a new guardian for ${ children.familiar() }?: successor_guardians.there_is_another
    datatype: yesnoradio
---
id: guardian information
sets:
  - guardians[i].name.first
  - guardians[i].name.last
  - guardians[i].name.middle
  - guardians[i].name.suffix
  - guardians[i].address.address
  - guardians[i].address.unit
  - guardians[i].address.city
  - guardians[i].address.state
  - guardians[i].address.zip
  - guardians[i].address.country
question: |
  Tell us about
  % if who_is_making_petition == "minor" and (not form_filled_by_attorney):
  your
  % else:
  ${ children[0].familiar() }'s
  % endif
  % if len(guardians.complete_elements()) < 1:
  current guardian(s)
  % else:
  other guardian
  % endif
subquestion: |
  % if len(guardians.complete_elements()) < 1:
  **If ${ children[0].familiar() } has more than one guardian**, you will get the chance to add them after this screen. 

  You can add **up to two guardians** to this petition. 
  % endif
fields:
  - code: |
      guardians[i].name_fields()
  - code: |
      guardians[i].address_fields()
  - Phone number: guardians[i].phone_number
    datatype: al_international_phone
    required: False
  - When was this person appointed as ${ children[0].familiar() }'s guardian?: guardians[i].appointment_date
    datatype: date
    required: True
validation code: |
  if len(guardians.complete_elements()) > 0:
    guardians.there_is_another = False
---
id: guardians there_is_another
question: |
  % if who_is_making_petition == "minor" and (not form_filled_by_attorney):
  Do you
  % else:
  Does ${ children[0].familiar() }
  % endif 
  have another guardian?
fields:
  - no label: guardians.there_is_another
    datatype: yesnoradio
---
id: Reasons for removing guardian
question: |
  Why do you want to remove
  % if (who_is_making_petition == 'minor') and (not form_filled_by_attorney):
  your
  % else:
  ${ children[0].familiar() }'s
  % endif
  % if len(guardians.complete_elements()) < 2:
  guardian?
  % else:
  guardians?
  % endif
subquestion: |
  Check all reasons that apply.
fields:
  - ${ f"My parents" if (who_is_making_petition == 'minor' and not form_filled_by_attorney) else f"{children[0].familiar()}'s parents" } are able to care for ${ f"me" if (who_is_making_petition == 'minor' and not form_filled_by_attorney) else f"them" } now: bio_parents_can_resume_responsibilities
    datatype: yesno
  - Explain why: why_parents_can_resume_responsibility
    datatype: area
    show if: bio_parents_can_resume_responsibilities
  - ${ f"I" if (who_is_making_petition == 'minor' and not form_filled_by_attorney) else children[0].familiar() } was adopted: minor_adopted
    datatype: yesno
  - Something else: has_attachment
    datatype: yesno
  - Explain why: other_reason_for_removal
    datatype: area
    show if: has_attachment
validation code: |
  if not (bio_parents_can_resume_responsibilities or minor_adopted or has_attachment):
    validation_error("Select at least one reason", field="has_attachment")
---
id: responsible parent information
sets:
  - responsible_parents[0].name.first
  - responsible_parents[0].name.last
  - responsible_parents[0].name.middle
  - responsible_parents[0].name.suffix
  - responsible_parents[0].address.address
  - responsible_parents[0].address.unit
  - responsible_parents[0].address.city
  - responsible_parents[0].address.state
  - responsible_parents[0].address.zip
  - responsible_parents[0].address.country
  - responsible_parents[0].phone_number
question: |
  % if responsible_parents.target_number > 1 and (who_is_making_petition == "minor" and (not form_filled_by_attorney)):
  ${ capitalize(ordinal(i)) } parent resuming responsibility for you
  % elif responsible_parents.target_number < 2 and (who_is_making_petition == "minor" and (not form_filled_by_attorney)):
  Parent resuming responsibility for you
  % elif responsible_parents.target_number > 1:
  ${ capitalize(ordinal(i)) } parent resuming responsibility for ${ children[0].familiar() }
  % else:
  Parent resuming responsibility for ${ children[0].familiar() }
  % endif 
fields:
  - code: |
      responsible_parents[0].name_fields()
  - code: |
      responsible_parents[0].address_fields(country_code=AL_DEFAULT_COUNTRY, default_state=AL_DEFAULT_STATE, show_country=False)
  - Phone number: responsible_parents[0].phone_number
    datatype: al_international_phone
    required: False
validation code: |
  if len(responsible_parents.complete_elements()) > 0:
    responsible_parents.there_is_another = False
---
id: responsible parent information
sets:
  - responsible_parents[i].name.first
  - responsible_parents[i].name.last
  - responsible_parents[i].name.middle
  - responsible_parents[i].name.suffix
  - responsible_parents[i].address.address
  - responsible_parents[i].address.unit
  - responsible_parents[i].address.city
  - responsible_parents[i].address.state
  - responsible_parents[i].address.zip
  - responsible_parents[i].address.country
  - responsible_parents[i].phone_number
question: |
  % if responsible_parents.target_number > 1:
  ${ capitalize(ordinal(i)) } parent
  % else:
  Parent
  % endif 
  resuming responsibility for
  % if who_is_making_petition == "minor" and (not form_filled_by_attorney):
  you
  % else:
  ${ children[0].familiar() }
  % endif 
fields:
  - code: |
      responsible_parents[i].name_fields()
  - code: |
      responsible_parents[i].address_fields(country_code=AL_DEFAULT_COUNTRY, default_state=AL_DEFAULT_STATE, show_country=False)
  - Phone number: responsible_parents[i].phone_number
    datatype: al_international_phone
    required: False
validation code: |
  if len(responsible_parents.complete_elements()) > 0:
    responsible_parents.there_is_another = False
---
id: responsible_parents there_is_another
question: |
  Other parent resuming responsibility 
fields:
  - Is there another parent resuming responsibility for ${ children[0].familiar() }?: responsible_parents.there_is_another
    datatype: yesnoradio
---
id: Attorney's information
question: |
  Attorney's information
subquestion: |
  If you have an attorney, provide their information
fields:
  - "BBO Number": attorneys[0].bbo
    datatype: number
---
code: |
  if len(attorneys.complete_elements()) > 0:
    attorneys.there_is_another = False
---
id: preview petition_for_removal_of_guardian
question: |
  Preview your form before you sign it
subquestion: |
  Here is a preview of the form you will sign on the next page.   

  ${ al_court_bundle.as_pdf(key='preview') }

  Click the image to open it in a new tab. Click the "Edit answers" button
  to edit your answers.

  ${ action_button_html(url_action('review_petition_for_removal_of_guardian'), label='Edit answers', color='info') }

  Remember to come back to this window to continue and sign your form.
continue button field: petition_for_removal_of_guardian_preview_question
---
code: |
  signature_fields = [user.attr_name('signature') for user in users]
---
code: |
  addresses_to_search = [children[0].address]
---
#################### Question Blocks End #####################
---
#################### Review Blocks Start #####################
---
id: Petition for Removal of Guardian of review screen
event: review_petition_for_removal_of_guardian
question: |
  Review your answers
review:
  - Edit: docket_number
    button: |
      **Docket number**:
      ${ docket_number }
  - Edit: trial_court
    button: |
      **Trial court**

      % if defined("trial_court.division"):
      * division: ${ trial_court.division }
      % endif
  - Edit: children.revisit
    button: |
      **Children**

      % for item in children:
        * ${ item }
      % endfor
  - Edit: users.revisit
    button: |
      **users**

      % for item in users:
        * ${ item }
      % endfor
  - Edit: guardians.revisit
    button: |
      **Guardians**

      % for item in guardians:
        * ${ item }
      % endfor
  - Edit: guardians[0].appointment_date
    button: |
      **Date of guardians1 appointment**:
      ${ guardians[0].appointment_date }
  - Edit: guardians[1].appointment_date
    button: |
      **Date of guardians2 appointment**:
      ${ guardians[1].appointment_date }
  - Edit: bio_parents_can_resume_responsibilities
    button: |
      **Bio parents can resume responsibilities**:
      ${ word(yesno(bio_parents_can_resume_responsibilities)) }
  - Edit: responsible_parents.revisit
    button: |
      **Responsible parents**

      % for item in responsible_parents:
        * ${ item }
      % endfor
  - Edit: minor_adopted
    button: |
      **Minor adopted**:
      ${ word(yesno(minor_adopted)) }
  - Edit: has_attachment
    button: |
      **Has attachment**:
      ${ word(yesno(has_attachment)) }
  - Edit: requested_guardians.revisit
    button: |
      **Guardian successors**

      % for item in requested_guardians:
        * ${ item }
      % endfor
  - Edit: attorneys.revisit
    button: |
      **Attorneys**

      % for item in attorneys:
        * ${ item }
      % endfor
  - Edit: attorneys[0].bbo
    button: |
      **BBO Number**:
      ${ attorneys[0].bbo }
---
continue button field: children.revisit
question: |
  Edit children
subquestion: |
  ${ children.table }

  ${ children.add_action() }
---
table: children.table
rows: children
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
edit:
  - name.first
confirm: True
---
continue button field: users.revisit
question: |
  Edit users
subquestion: |
  ${ users.table }

  ${ users.add_action() }
---
table: users.table
rows: users
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
  - Address: |
      row_item.address.block() if defined("row_item.address.city") else ""
  - Phone number: |
      row_item.phone_number if defined("row_item.phone_number") else ""
  - Signature: |
      row_item.signature if defined("row_item.signature") else ""
edit:
  - name.first
  - address.city
  - phone_number
  - signature
confirm: True
---
continue button field: guardians.revisit
question: |
  Edit guardians
subquestion: |
  ${ guardians.table }

  ${ guardians.add_action() }
---
table: guardians.table
rows: guardians
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
  - Address: |
      row_item.address.block() if defined("row_item.address.city") else ""
  - Phone number: |
      row_item.phone_number if defined("row_item.phone_number") else ""
edit:
  - name.first
  - address.city
  - phone_number
confirm: True
---
continue button field: responsible_parents.revisit
question: |
  Edit responsible_parents
subquestion: |
  ${ responsible_parents.table }

  ${ responsible_parents.add_action() }
---
table: responsible_parents.table
rows: responsible_parents
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
  - Address: |
      row_item.address.block() if defined("row_item.address.city") else ""
  - Phone number: |
      row_item.phone_number if defined("row_item.phone_number") else ""
edit:
  - name.first
  - address.city
  - phone_number
confirm: True
---
continue button field: requested_guardians.revisit
question: |
  Edit requested_guardians
subquestion: |
  ${ requested_guardians.table }

  ${ requested_guardians.add_action() }
---
table: requested_guardians.table
rows: requested_guardians
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
edit:
  - name.first
confirm: True
---
continue button field: attorneys.revisit
question: |
  Edit attorneys
subquestion: |
  ${ attorneys.table }

  ${ attorneys.add_action() }
---
table: attorneys.table
rows: attorneys
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
  - Address: |
      row_item.address.block() if defined("row_item.address.zip") else ""
  - Phone number: |
      row_item.phone_number if defined("row_item.phone_number") else ""
edit:
  - name.first
  - address.zip
  - phone_number
confirm: True
---
id: separate appointment petition notice
question: |
  If you want to suggest a new guardian, you'll need to make a separate petition
subquestion: |
  Since you are **not the minor's parent**, you cannot use this removal form to suggest a new guardian. 

  **If you want to ask the court to appoint a new guardian** for the minor, you will need to file a separate *Petition for Guardianship of a Minor*.

continue button field: appointment_petition_notice
---
#################### Review Blocks End #####################
---
id: download petition_for_removal_of_guardian
event: petition_for_removal_of_guardian_download
question: |
  All done
subquestion: |
  Thank you ${users}. Your form is ready to download and deliver.

  View, download and send your form below. Click the "Edit answers" button to fix any mistakes.

  ${ action_button_html(url_action('review_petition_for_removal_of_guardian'), label='Edit answers', color='info') }


  ${ al_user_bundle.download_list_html() }


  ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }

progress: 100
---
#################### Attachment Blocks Start #####################
---
# ALDocument objects specify the metadata for each template
objects:
  - petition_for_removal_of_guardian_Post_interview_instructions: ALDocument.using(title="Instructions", filename="petition_for_removal_of_guardian_next_steps.docx", enabled=True, has_addendum=False)
  - petition_for_removal_of_guardian: ALDocument.using(title="Petition for Removal of Guardian of Minor", filename="petition_for_removal_of_guardian", enabled=True, has_addendum=True, default_overflow_message=" (Continued in Attachment)")
---
# Bundles group the ALDocuments into separate downloads, such as for court and for the user
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[
      petition_for_removal_of_guardian_Post_interview_instructions,
      petition_for_removal_of_guardian,
      motion_temporary_guardian_attachment,
      Application_for_appointment_Post_interview_instructions,
      Application_for_appointment_attachment,
      affidavit_of_care_or_custody_attachment,
      affidavitofindigency_attachment,
      military_affidavit_bundle,
      ],
      filename="Petition for Removal of Guardian",
      title="All forms to download for your records",
      enabled=True
      )
  - al_court_bundle: ALDocumentBundle.using(elements=[
      petition_for_removal_of_guardian,
      motion_temporary_guardian_attachment,
      Application_for_appointment_attachment,
      affidavit_of_care_or_custody_attachment,
      military_affidavit_bundle,
      affidavitofindigency_attachment,
      ],
      filename="Petition for Removal of Guardian",
      title="All forms to file in court",
      enabled=True
      )
---
attachment:
  name: Post-interview-Instructions
  filename: petition_for_removal_of_guardian_next_steps
  docx template file: petition_for_removal_of_guardian_next_steps.docx
  variable name: petition_for_removal_of_guardian_Post_interview_instructions[i]
  skip undefined: True
  tagged pdf: True
---
code: |
  petition_for_removal_of_guardian.overflow_fields["my_interest_is"].label = "Continued from Section 1 - Nature of petitioner's interest:"
  petition_for_removal_of_guardian.overflow_fields["my_interest_is"].overflow_trigger = 180
  petition_for_removal_of_guardian.overflow_fields["why_parents_can_resume_responsibility"].label = "Continued from Section 3 - Parents can resume parental responsibilities:"
  petition_for_removal_of_guardian.overflow_fields["why_parents_can_resume_responsibility"].overflow_trigger = 340
  petition_for_removal_of_guardian.overflow_fields["other_reason_for_removal"].label = "Continued from Section 3 - Other:"
  petition_for_removal_of_guardian.overflow_fields["other_reason_for_removal"].overflow_trigger = 340
  petition_for_removal_of_guardian.overflow_fields.gathered = True
---
attachment:
  name: Petition for Removal of Guardian of
  filename: petition_for_removal_of_guardian
  variable name: petition_for_removal_of_guardian[i]
  skip undefined: True
  pdf template file: petition_for_removal_of_guardian.pdf
  fields:
    - "docket_number": ${ docket_number }
    - "trial_court_division": ${ trial_court.division }
    - "children1_name_middle": ${ children[0].name.middle }
    - "children1_name_last": ${ children[0].name.last }
    - "children1_name_first": ${ children[0].name.first }
    - "users1_name_middle_initial": ${ users[0].name.middle_initial() }
    - "users1_name_last": ${ users[0].name.last }
    - "users1_name_first": ${ users[0].name.first }
    - "users1_address_address": ${ users[0].address.address }
    - "users1_address_unit": ${ users[0].address.unit }
    - "users1_address_state": ${ users[0].address.state }
    - "users1_address_zip": ${ users[0].address.zip }
    - "users1_address_city": ${ users[0].address.city }
    - "users1_phone": ${ users[0].phone_numbers() }
    - "users2_name_middle_initial": ${ users.item(1).name.middle_initial() }
    - "users2_name_last": ${ users.item(1).name.last }
    - "users2_name_first": ${ users.item(1).name.first }
    - "users2_address_address": ${ users.item(1).address.address }
    - "users2_address_unit": ${ users.item(1).address.unit }
    - "users2_address_state": ${ users.item(1).address.state }
    - "users2_address_zip": ${ users.item(1).address.zip }
    - "users2_address_city": ${ users.item(1).address.city }
    - "users2_phone": ${ users.item(1).phone_numbers() }
    - "petitioner_is_parent": ${ who_is_making_petition == "parent" }
    - "petitioner_is_both_parents": ${ who_is_making_petition == "parent" and len(users.complete_elements()) > 1 }
    - "petitioner_is_minor": ${ who_is_making_petition == "minor" }
    - "petitioner_is_interested_party": ${ who_is_making_petition == "interested_party" }
    - "guardians1_name_last": ${ guardians[0].name.last }
    - "guardians1_name_middle_initial": ${ guardians[0].name.middle_initial() }
    - "guardians1_name_first": ${ guardians[0].name.first }
    - "guardians1_address_address": ${ guardians[0].address.address }
    - "guardians1_address_unit": ${ guardians[0].address.unit }
    - "guardians1_address_state": ${ guardians[0].address.state }
    - "guardians1_address_zip": ${ guardians[0].address.zip }
    - "guardians1_address_city": ${ guardians[0].address.city }
    - "guardians1_phone": ${ guardians[0].phone_numbers() }
    - "guardians1_appointment_date": ${ guardians[0].appointment_date.format() }
    - "guardians2_name_last": ${ guardians[1].name.last }
    - "guardians2_name_middle_initial": ${ guardians[1].name.middle_initial() }
    - "guardians2_name_first": ${ guardians[1].name.first }
    - "guardians2_address_address": ${ guardians[1].address.address }
    - "guardians2_address_unit": ${ guardians[1].address.unit }
    - "guardians2_address_state": ${ guardians[1].address.state }
    - "guardians2_address_zip": ${ guardians[1].address.zip }
    - "guardians2_address_city": ${ guardians[1].address.city }
    - "guardians2_phone": ${ guardians[1].phone_numbers() }
    - "guardians2_appointment_date": ${ guardians[1].appointment_date.format() }
    - "bio_parents_can_resume_responsibilities": ${ bio_parents_can_resume_responsibilities }
    - "responsible_parents1_name_middle_initial": ${ responsible_parents[0].name.middle_initial() }
    - "responsible_parents1_name_first": ${ responsible_parents[0].name.first }
    - "responsible_parents1_name_last": ${ responsible_parents[0].name.last }
    - "responsible_parents1_address_address": ${ responsible_parents[0].address.address }
    - "responsible_parents1_address_unit": ${ responsible_parents[0].address.unit }
    - "responsible_parents1_address_state": ${ responsible_parents[0].address.state }
    - "responsible_parents1_address_zip": ${ responsible_parents[0].address.zip }
    - "responsible_parents1_address_city": ${ responsible_parents[0].address.city }
    - "responsible_parents1_phone": ${ responsible_parents[0].phone_numbers() }
    - "responsible_parents2_name_middle_initial": ${ responsible_parents[1].name.middle_initial() }
    - "responsible_parents2_name_last": ${ responsible_parents[1].name.last }
    - "responsible_parents2_name_first": ${ responsible_parents[1].name.first }
    - "responsible_parents2_address_address": ${ responsible_parents[1].address.address }
    - "responsible_parents2_address_unit": ${ responsible_parents[1].address.unit }
    - "responsible_parents2_address_state": ${ responsible_parents[1].address.state }
    - "responsible_parents2_address_zip": ${ responsible_parents[1].address.zip }
    - "responsible_parents2_address_city": ${ responsible_parents[1].address.city }
    - "responsible_parents2_phone": ${ responsible_parents[1].phone_numbers() }
    - "minor_adopted": ${ minor_adopted }
    - "has_attachment": ${ has_attachment }
    - "guardian_successors1_name_middle_initial": ${ requested_guardians[0].name.middle_initial() }
    - "guardian_successors1_name_last": ${ requested_guardians[0].name.last }
    - "guardian_successors1_name_first": ${ requested_guardians[0].name.first }
    - "guardian_successors2_name_middle_initial": ${ requested_guardians[1].name.middle_initial() }
    - "guardian_successors2_name_last": ${ requested_guardians[1].name.last }
    - "guardian_successors2_name_first": ${ requested_guardians[1].name.first }
    - "users1_signature": ${ f"/s/ {users[0]}" if esign else "" }
    - "users1_signature_date": ${ today() }
    - "users2_signature": |
        % if len(users.complete_elements()) > 1 and esign:
        ${ f"/s/ {users[1]}" }
        % else:
        ${ "" }
        % endif
    - "users2_signature_date": |
        % if len(users.complete_elements()) > 1 and esign:
        ${ today() }
        % endif
    - "attorneys1_name": ${ attorneys[0] }
    - "attorneys1_address_address": ${ attorneys[0].address.address }
    - "attorneys1_address_unit": ${ attorneys[0].address.unit }
    - "attorneys1_address_city": ${ attorneys[0].address.city }
    - "attorneys1_address_state": ${ attorneys[0].address.state }
    - "attorneys1_address_zip": ${ attorneys[0].address.zip }
    - "attorneys1_phone": ${ attorneys[0].phone_numbers() }
    - "attorneys1_bbo": ${ attorneys[0].bbo }
    - my_interest_is: |
        % if who_is_making_petition == 'interested_party':
        ${ petition_for_removal_of_guardian.safe_value('my_interest_is') }
        % else:
        ${ "" }
        % endif
    - why_parents_can_resume_responsibility: |
        % if bio_parents_can_resume_responsibilities:
        ${ petition_for_removal_of_guardian.safe_value('why_parents_can_resume_responsibility') }
        % else:
        ${ "" }
        % endif
    - other_reason_for_removal: |
        % if has_attachment:
        ${ petition_for_removal_of_guardian.safe_value('other_reason_for_removal') }
        % else:
        ${ "" }
        % endif
---
attachment:
  variable name: petition_for_removal_of_guardian.addendum
  docx template file: petition_for_removal_of_guardian_attachment.docx
---
#################### Attachment Blocks End #####################
---
########### Customized screens #################################
code: |
  if who_is_making_petition == "minor":
    additional_parties = ALPeopleList(elements=set(guardians + responsible_parents))
  else:
    additional_parties = ALPeopleList(elements=guardians)
---